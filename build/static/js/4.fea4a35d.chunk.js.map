{"version":3,"sources":["constants.js","ElectionList.js","GetCommittedAmount.js","statics/TopNavigationBar.js","statics/BottomNavigationBar.js","MainPage.js"],"names":["ASSET_ID","ElectionList","dispatch","useDispatch","algodClient","useSelector","state","status","addressNum","algosdk","Algodv2","walletType","localStorage","getItem","isThereAddress","split","data","candidates","address","image","name","choice_per_vote","created_at","description","is_finished","is_started","process_image","slug","title","wallet","myAlgoConnect","voteData","a","myAlgoWallet","MyAlgoConnect","connect","shouldSelectOneAccount","accounts","accountInformation","do","myAccountInfo","balance","assets","find","element","amount","containsChoice","some","length","alert","type","getTransactionParams","suggestedParams","amountToSend","txn","makeAssetTransferTxnWithSuggestedParamsFromObject","from","to","assetIndex","signTransaction","toByte","signedTxn","sendRawTransaction","blob","window","location","reload","console","log","algoSignerConnect","AlgoSigner","open","ledger","signTxn","encoding","msgpackToBase64","base64ToMsgpack","algoMobileConnect","connector","WalletConnect","bridge","qrcodeModal","QRCodeModal","txnsToSign","Buffer","encodeUnsignedTransaction","toString","message","requestParams","request","formatJsonRpcRequest","sendCustomRequest","result","decodedResult","map","Uint8Array","className","index","style","display","flexDirection","alignItems","src","alt","paddingLeft","paddingBottom","card_desc","min","placeholder","item","value","onClick","e","election","voteVal","$","target","closest","val","amt","indexerClient","Indexer","GetCommittedAmount","walletAddress","userAddress","options","firstAddress","secondAddress","txnAmt","useState","Amt","setAmt","getIt","searchForTransactions","assetID","limit","pastTxn","forEach","useEffect","TopNavigationBar","darkTheme","isWalletConnected","useWindowSize","width","setBalance","addresses","addrArr","bal","push","addressIndex","addr","setItem","justifyContent","textTransform","text","fontSize","undefined","connected","createSession","on","error","payload","params","fontWeight","wordSpacing","color","padding","letterSpacing","background","height","borderTop","opacity","removeItem","BottomNavigationBar","NavLink","cursor","MainPage","id","path"],"mappings":"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","file":"static/js/4.fea4a35d.chunk.js","sourcesContent":["const ASSET_ID = 21364625;\nexport { ASSET_ID };\n","import _ from \"lodash\";\nimport $ from \"jquery\";\nimport \"./styles/electionlist.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport algosdk from \"algosdk\";\nimport { ASSET_ID } from \"./constants\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\n\nconst ElectionList = () => {\n  const dispatch = useDispatch();\n\n  const addressNum = useSelector((state) => state.status.addressNum);\n\n  const algodClient = new algosdk.Algodv2(\n    {\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\n    },\n    \"https://testnet-algorand.api.purestake.io/ps2\",\n    \"\"\n  );\n  const walletAddress = localStorage.getItem(\"address\");\n  const walletType = localStorage.getItem(\"wallet-type\");\n\n  const addresses = localStorage.getItem(\"addresses\")?.split(\",\");\n\n  const isThereAddress = localStorage.getItem(\"address\");\n\n  const data = [\n    {\n      candidates: [\n        {\n          address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n          image: \"\",\n          name: \"Yes\",\n        },\n\n        {\n          address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n          image: \"\",\n          name: \"No\",\n        },\n      ],\n      choice_per_vote: 1,\n      created_at: \"2021-12-08T10:32:15.878473\",\n      description: \"Lorem ipsum\",\n      is_finished: false,\n      is_started: true,\n      process_image: \"https://i.postimg.cc/90XSyrjH/choice.png\",\n      slug: \"CHOICE-COIN-IS-A-STANDARD-ALGORAND-ASSET-b0c7db\",\n      title: \"CHOICE COIN IS A STANDARD ALGORAND ASSET\",\n      wallet: {\n        address: \"NX4T2FTIGNPVPSMEXJFMMKD46O4HRCPN25BDHOUW2SWXANZPQBZEDYKDVE\",\n      },\n    },\n  ];\n\n  const myAlgoConnect = async (voteData) => {\n    const myAlgoWallet = new MyAlgoConnect();\n\n    try {\n      const accounts = await myAlgoWallet.connect({\n        shouldSelectOneAccount: true,\n      });\n      const address = !!isThereAddress ? isThereAddress : accounts[0].address;\n\n      const myAccountInfo = await algodClient\n        .accountInformation(\n          !!isThereAddress ? isThereAddress : accounts[0].address\n        )\n        .do();\n\n      // get balance of the voter\n      const balance = myAccountInfo.assets\n        ? myAccountInfo.assets.find(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          ).amount / 100\n        : 0;\n\n      // check if the voter address has Choice\n      const containsChoice = myAccountInfo.assets\n        ? myAccountInfo.assets.some(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          )\n        : false;\n\n      // if the address has no ASAs\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({ type: \"close_vote_modal\" });\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({ type: \"close_vote_modal\" });\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams,\n      });\n\n      const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\n      await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n      // close modal.\n      dispatch({ type: \"close_vote_modal\" });\n\n      // alert success\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const algoSignerConnect = async (voteData) => {\n    try {\n      if (typeof window.AlgoSigner === \"undefined\") {\n        window.open(\n          \"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\",\n          \"_blank\"\n        );\n      } else {\n        await window.AlgoSigner.connect({\n          ledger: \"TestNet\",\n        });\n        const accounts = await window.AlgoSigner.accounts({\n          ledger: \"TestNet\",\n        });\n\n        const address = !!isThereAddress ? isThereAddress : accounts[0].address;\n\n        const myAccountInfo = await algodClient\n          .accountInformation(\n            !!isThereAddress ? isThereAddress : accounts[0].address\n          )\n          .do();\n\n        // get balance of the voter\n        const balance = myAccountInfo.assets\n          ? myAccountInfo.assets.find(\n              (element) => element[\"asset-id\"] === ASSET_ID\n            ).amount / 100\n          : 0;\n\n        // check if the voter address has Choice\n        const containsChoice = myAccountInfo.assets\n          ? myAccountInfo.assets.some(\n              (element) => element[\"asset-id\"] === ASSET_ID\n            )\n          : false;\n\n        // if the address has no ASAs\n        if (myAccountInfo.assets.length === 0) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({ type: \"close_vote_modal\" });\n          return;\n        }\n\n        if (!containsChoice) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({ type: \"close_vote_modal\" });\n          return;\n        }\n\n        if (voteData.amount > balance) {\n          alert(\"You do not have sufficient balance to make this transaction.\");\n          return;\n        }\n\n        const suggestedParams = await algodClient.getTransactionParams().do();\n        const amountToSend = voteData.amount * 100;\n\n        const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: voteData.address,\n          amount: amountToSend,\n          assetIndex: ASSET_ID,\n          suggestedParams,\n        });\n\n        const signedTxn = await window.AlgoSigner.signTxn([\n          { txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte()) },\n        ]);\n        await algodClient\n          .sendRawTransaction(\n            window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)\n          )\n          .do();\n\n        // close modal.\n        dispatch({ type: \"close_vote_modal\" });\n\n        // alert success\n        alert(\"You have successfully placed your vote for this election\");\n        window.location.reload();\n      }\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const algoMobileConnect = async (voteData) => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n\n    try {\n      const address = !!isThereAddress ? isThereAddress : \"\";\n\n      const myAccountInfo = await algodClient.accountInformation(address).do();\n\n      const balance = myAccountInfo.assets\n        ? myAccountInfo.assets.find(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          ).amount / 100\n        : 0;\n\n      const containsChoice = myAccountInfo.assets\n        ? myAccountInfo.assets.some(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          )\n        : false;\n\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams,\n      });\n\n      const txnsToSign = [\n        {\n          txn: Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\n            \"base64\"\n          ),\n          message: \"Transaction using Mobile Wallet\",\n        },\n      ];\n\n      const requestParams = [txnsToSign];\n\n      const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n      const result = await connector.sendCustomRequest(request);\n\n      const decodedResult = result.map((element) => {\n        return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n      });\n\n      console.log(decodedResult);\n\n      await algodClient.sendRawTransaction(decodedResult).do();\n\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const placeVote = (address, amount, election) => {\n    if (!address) {\n      alert(\"Select an option to vote!!\");\n      return;\n    }\n\n    if (walletType === \"my-algo\") {\n      myAlgoConnect({ address, amount, election });\n    } else if (walletType === \"algosigner\") {\n      algoSignerConnect({ address, amount, election });\n    } else if (walletType === \"walletconnect\") {\n      algoMobileConnect({ address, amount, election });\n    }\n  };\n\n  return (\n    <div className=\"ptt_elt\">\n      <div className=\"ptt_elt_inn\">\n        <div className=\"ptt_hd\">\n          <p><strong>CHOICE-COIN VOTING PARTICIPATION</strong></p>\n        </div>\n        <ul className=\"card_list\">\n          {data?.map((slug, index) => {\n            return (\n              <div className=\"card_cont\" key={index}>\n                <div className=\"card_r1\">\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <div className=\"card_elt_img\">\n                      {slug.process_image ? (\n                        <img src={slug.process_image} alt=\"\" />\n                      ) : (\n                        <i\n                          className=\"uil uil-asterisk\"\n                          style={{ paddingLeft: \"2px\", paddingBottom: \"2px\" }}\n                        />\n                      )}\n                    </div>\n                    <div className=\"card_elt_tit\">{slug.title}</div>\n                  </div>\n\n                  {/* <div className=\"electionEndTime\">Ends on:</div> */}\n                </div>\n\n                <div className=\"card_elt_desc\">{slug?.card_desc}</div>\n\n                <div className=\"card_cand\">\n                  <div className=\"card_cand_hd\">\n                    <div className=\"amountToCommit\">\n                      <p>Amount of Choice to commit:</p>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        placeholder=\"1\"\n                        className=\"amtToCommitInp\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"vote_collap\">\n                    <div className=\"card_cand_hd\">Options</div>\n                    <ul className=\"vote_now_list\">\n                      {slug?.candidates?.map((item, index) => {\n                        return (\n                          <li key={index}>\n                            <input\n                              type=\"radio\"\n                              name=\"options\"\n                              value={item.address}\n                            />\n\n                            <div className=\"vote_img_cont\">\n                              {!!item.image ? (\n                                <img src={item.image} alt=\"\" />\n                              ) : (\n                                <i className=\"uil uil-asterisk\"></i>\n                              )}\n                            </div>\n                            <p>{item.name}</p>\n                          </li>\n                        );\n                      })}\n                    </ul>\n\n                    <div className=\"rec_vote_cont\">\n                      <button\n                        className=\"record_vote\"\n                        onClick={(e) => {\n                          var voteVal = $(e.target)\n                            .closest(\".card_cand\")\n                            .find(\".vote_now_list\");\n\n                          var amountToSend = $(e.target)\n                            .closest(\".card_cand\")\n                            .find(\".amtToCommitInp\")\n                            .val();\n\n                          var amt = !!amountToSend\n                            ? amountToSend\n                            : slug.choice_per_vote;\n\n                          placeVote(\n                            $(\"input[name=options]:checked\", voteVal).val(),\n                            amt,\n                            slug\n                          );\n                        }}\n                      >\n                        Submit vote\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ElectionList;\n","import algosdk from \"algosdk\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = { \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\" };\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst GetCommittedAmount = () => {\n  const addressNum = useSelector((state) => state.status.addressNum);\n  const walletAddress = localStorage.getItem(\"address\");\n  const userAddress = !!walletAddress\n    ? walletAddress\n    : localStorage.getItem(\"addresses\").split(\",\")[addressNum];\n\n  // const userAddress = localStorage.getItem(\"address\");\n\n  const options = [\n    {\n      address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n      image: \"\",\n      name: \"Yes\",\n    },\n\n    {\n      address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n      image: \"\",\n      name: \"No\",\n    },\n  ];\n\n  const firstAddress = options[0].address;\n  const secondAddress = options[1].address;\n  let txnAmt = 0;\n\n  const [Amt, setAmt] = useState(0);\n\n  const getIt = async () => {\n    try {\n      let pastTxn = await indexerClient\n        .searchForTransactions()\n        .address(userAddress)\n        .assetID(CHOICE_ID)\n        .limit()\n        .do();\n      const txns = pastTxn[\"transactions\"];\n\n      txns.forEach((item) => {\n        const txn = item[\"asset-transfer-transaction\"];\n        if (\n          txn[\"receiver\"] === firstAddress ||\n          txn[\"receiver\"] === secondAddress\n        ) {\n          txnAmt = txnAmt + txn[\"amount\"] / 100;\n        }\n      });\n\n      setAmt(txnAmt);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getIt();\n  }, [userAddress]);\n\n  return <>{Amt}</>;\n};\n\nexport default GetCommittedAmount;\n","import algosdk from \"algosdk\";\nimport { ASSET_ID } from \"../constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport GetCommittedAmount from \"../GetCommittedAmount\";\n\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\n\nconst TopNavigationBar = ({ darkTheme }) => {\n  const dispatch = useDispatch();\n\n  const addressNum = useSelector((state) => state.status.addressNum);\n  const isWalletConnected =\n    localStorage.getItem(\"wallet-type\") === null ? false : true;\n\n  const LogOut = () => {\n    localStorage.removeItem(\"address\");\n    localStorage.removeItem(\"addresses\");\n    localStorage.removeItem(\"wallet-type\");\n    localStorage.removeItem(\"walletconnect\");\n    window.location.reload();\n    console.log(\"data\");\n  };\n\n  const setMode = () => {\n    if (!darkTheme) {\n      localStorage.setItem(\"mode\", \"dark\");\n      dispatch({ type: \"dark_mode\" });\n    } else {\n      localStorage.setItem(\"mode\", \"light\");\n      dispatch({ type: \"light_mode\" });\n    }\n  };\n\n  const [width] = useWindowSize();\n  const [balance, setBalance] = useState([]);\n\n  const algodClient = new algosdk.Algodv2(\n    {\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\n    },\n    \"https://testnet-algorand.api.purestake.io/ps2\",\n    \"\"\n  );\n\n  const walletAddress = localStorage.getItem(\"address\");\n  const addresses = localStorage.getItem(\"addresses\")?.split(\",\");\n\n  let addrArr = [];\n\n  useEffect(() => {\n    addresses?.forEach(async (item) => {\n      const myAccountInfo = await algodClient.accountInformation(item).do();\n      const bal =\n        myAccountInfo.assets.find((element) => element[\"asset-id\"] === ASSET_ID)\n          ?.amount / 100;\n\n      addrArr.push({ balance: !!bal ? bal : 0, address: item });\n\n      if (addrArr?.length === addresses?.length) {\n        console.log(addrArr);\n        dispatch({\n          type: \"setAlgoAddress\",\n          addressIndex: 0,\n          addr: addrArr[0]?.address,\n        });\n        setBalance(addrArr);\n      }\n    });\n  }, []);\n\n  const myAlgoConnect = async () => {\n    const myAlgoWallet = new MyAlgoConnect();\n\n    try {\n      const accounts = await myAlgoWallet.connect({\n        shouldSelectOneAccount: true,\n      });\n\n      const addresses = accounts.map((item) => item?.address);\n      const address = accounts[0].address;\n\n      // close modal.\n      localStorage.setItem(\"wallet-type\", \"my-algo\");\n      localStorage.setItem(\"address\", address);\n      localStorage.setItem(\"addresses\", addresses);\n\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = () => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n\n    if (!connector.connected) {\n      connector.createSession();\n    }\n\n    connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const { accounts } = payload.params[0];\n\n      const addresses = accounts.map((item) => item);\n      const address = accounts[0];\n\n      localStorage.setItem(\"wallet-type\", \"walletconnect\");\n      localStorage.setItem(\"address\", address);\n      localStorage.setItem(\"addresses\", addresses);\n\n      window.location.reload();\n    });\n\n    connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const { accounts } = payload.params[0];\n\n      const addresses = accounts.map((item) => item);\n      const address = accounts[0];\n\n      localStorage.setItem(\"wallet-type\", \"walletconnect\");\n      localStorage.setItem(\"address\", address);\n      localStorage.setItem(\"addresses\", addresses);\n\n      window.location.reload();\n    });\n\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  };\n\n  const algoSignerConnect = async () => {\n    try {\n      if (typeof window.AlgoSigner === \"undefined\") {\n        window.open(\n          \"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\",\n          \"_blank\"\n        );\n      } else {\n        await window.AlgoSigner.connect({\n          ledger: \"TestNet\",\n        });\n        const accounts = await window.AlgoSigner.accounts({\n          ledger: \"TestNet\",\n        });\n\n        const addresses = accounts.map((item) => item?.address);\n        const address = accounts[0].address;\n\n        // close modal.\n        localStorage.setItem(\"wallet-type\", \"algosigner\");\n        localStorage.setItem(\"address\", address);\n        localStorage.setItem(\"addresses\", addresses);\n\n        window.location.reload();\n      }\n    } catch (error) {\n      alert(\"AlgoSigner not set up yet!\");\n    }\n  };\n\n  return (\n    <header className=\"small_header\">\n      <div className=\"small_header_inn\">\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            textTransform: \"uppercase\",\n          }}\n        >\n          <strong>Choice Coin</strong>\n        </div>\n\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          {!!isWalletConnected ? (\n            <>\n              <div className=\"addrDisplay\">\n                <div className=\"addrDispMain\">\n                  <div className=\"addrDisplayInn\">\n                    <div className=\"addrBalance\">\n                      {balance[addressNum]?.balance} Choice\n                    </div>\n\n                    <CopyToClipboard text={balance[addressNum]?.address}>\n                      <div className=\"addressTxt\">\n                        <p>{balance[addressNum]?.address}</p>\n                        <i className=\"uil uil-copy\"></i>\n                      </div>\n                    </CopyToClipboard>\n                  </div>\n                </div>\n\n                <div className=\"dropDownConnect_items\">\n                  {balance?.map((item, index) => {\n                    return (\n                      <div\n                        key={index}\n                        className=\"dropDownConnect_item\"\n                        onClick={() => {\n                          dispatch({\n                            type: \"setAlgoAddress\",\n                            addressIndex: index,\n                            addr: item.address,\n                          });\n                        }}\n                      >\n                        <p className=\"dropDownConnect_item_txt\">\n                          {item.address}\n                        </p>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"dropDownConnect\">\n              <div className=\"dropDownConnect_button\">\n                <button className=\"connect_wallet_button\">\n                  <p>\n                    Connect Wallet\n                    <i\n                      className=\"uil uil-angle-down\"\n                      style={{ fontSize: \"18px\" }}\n                    />\n                  </p>\n                </button>\n              </div>\n\n              <div className=\"dropDownConnect_items\">\n                <div className=\"dropDownConnect_item\" onClick={myAlgoConnect}>\n                  <div className=\"dropDownConnect_img\">\n                    <img\n                      src=\"https://i.postimg.cc/76r9kXSr/My-Algo-Logo-4c21daa4.png\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <p className=\"dropDownConnect_item_txt\">Algo-Wallet</p>\n                </div>\n\n                <div\n                  className=\"dropDownConnect_item\"\n                  onClick={algoSignerConnect}\n                >\n                  <div className=\"dropDownConnect_img\">\n                    <img\n                      src=\"https://i.postimg.cc/L4JB4JwT/Algo-Signer-2ec35000.png\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <p className=\"dropDownConnect_item_txt\">\n                    {typeof window.AlgoSigner === undefined\n                      ? \"Install AlgoSigner\"\n                      : \"AlgoSigner\"}\n                  </p>\n                </div>\n\n                <div className=\"dropDownConnect_item\" onClick={connectWallet}>\n                  <div className=\"dropDownConnect_img\">\n                    <img\n                      src=\"https://i.postimg.cc/J7JZ4cFb/icon-37675b59-1.png\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <p className=\"dropDownConnect_item_txt\">\n                    Algorand Wallet(MOBILE)\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        {/*  */}\n      </div>\n\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          fontSize: \"13px\",\n          fontWeight: \"500\",\n          wordSpacing: \"1px\",\n          alignItems: \"center\",\n          color: walletAddress ? \"#fff\" : \"var(--wht)\",\n          padding: \"0px 5vw\",\n          letterSpacing: \"0.5px\",\n          textTransform: \"uppercase\",\n          background: walletAddress ? \"var(--main-col)\" : \"var(--background)\",\n          height: \"var(--sm-hd-height-half)\",\n          justifyContent: \"space-between\",\n          borderTop: \"1px solid var(--border-default)\",\n        }}\n      >\n        <p style={{ opacity: \"0.9\" }}>\n          Amount of Choice Coin used for voting:&nbsp;\n          {!!walletAddress && <GetCommittedAmount />} $Choice\n        </p>\n\n        {width > 850 && (\n          <ul className=\"listNavBig\">\n            <li onClick={setMode}>\n              LIGHT/DARK \n              {darkTheme ? (\n                <i className=\"uil uil-brightness-low\"></i>\n              ) : (\n                <i className=\"uil uil-moon\"></i>\n              )}\n            </li>\n            <li onClick={LogOut}>Sign Out</li>\n          </ul>\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default TopNavigationBar;\n","import { useDispatch } from \"react-redux\";\n\nconst BottomNavigationBar = ({ NavLink, darkTheme }) => {\n  const dispatch = useDispatch();\n\n  const LogOut = () => {\n    localStorage.removeItem(\"address\");\n    localStorage.removeItem(\"addresses\");\n    localStorage.removeItem(\"wallet-type\");\n    localStorage.removeItem(\"walletconnect\");\n    window.location.reload();\n  };\n\n  const setMode = () => {\n    if (!darkTheme) {\n      localStorage.setItem(\"mode\", \"dark\");\n      dispatch({ type: \"dark_mode\" });\n    } else {\n      localStorage.setItem(\"mode\", \"light\");\n      dispatch({ type: \"light_mode\" });\n    }\n  };\n\n  return (\n    <footer className=\"ft_sm\">\n      <ul className=\"ft_sm_inn\">\n        <li className=\"ft_sm_li\" onClick={setMode}>\n          <div\n            style={{\n              display: \"flex\",\n              fontSize: \"13px\",\n              opacity: \"0.65\",\n              cursor: \"pointer\",\n              alignItems: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            {darkTheme ? (\n              <i\n                className=\"uil uil-brightness-low\"\n                style={{ fontSize: \"21px\" }}\n              ></i>\n            ) : (\n              <i className=\"uil uil-moon\" style={{ fontSize: \"21px\" }}></i>\n            )}\n          </div>\n        </li>\n\n        <li className=\"ft_sm_li\">\n          <div\n            style={{\n              display: \"flex\",\n              fontSize: \"13px\",\n              opacity: \"0.65\",\n              cursor: \"pointer\",\n              alignItems: \"center\",\n              flexDirection: \"column\",\n            }}\n            onClick={LogOut}\n          >\n            <i className=\"uil uil-signout\" style={{ fontSize: \"21px\" }}></i>\n          </div>\n        </li>\n      </ul>\n    </footer>\n  );\n};\n\nexport default BottomNavigationBar;\n","import { useSelector } from \"react-redux\";\nimport ElectionList from \"./ElectionList\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { NavLink, Route, Routes } from \"react-router-dom\";\nimport TopNavigationBar from \"./statics/TopNavigationBar\";\nimport BottomNavigationBar from \"./statics/BottomNavigationBar\";\nimport Test from \"./statics/Test\";\n\nconst MainPage = () => {\n  const [width] = useWindowSize();\n  const darkTheme = useSelector((state) => state.status.darkTheme);\n\n  return (\n    <main\n      className={`${\n        darkTheme ? \"dark_theme big_screen\" : \"light_theme big_screen\"\n      }`}\n      id=\"main_main\"\n    >\n      <TopNavigationBar darkTheme={darkTheme} />\n\n      {/* <Test /> */}\n\n      <Routes>\n        <Route path=\"/\" element={<ElectionList />} />\n        <Route path=\"/home\" element={<ElectionList />} />\n      </Routes>\n\n      {width <= 850 && (\n        <BottomNavigationBar NavLink={NavLink} darkTheme={darkTheme} />\n      )}\n    </main>\n  );\n};\n\nexport default MainPage;\n"],"sourceRoot":""}