[{"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\index.js":"1","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\App.js":"2","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\MainPage.js":"3","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\store\\stores.js":"4","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\ElectionList.js":"5","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\BottomNavigationBar.js":"6","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\TopNavigationBar.js":"7","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\store\\reducers.js":"8","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\Test.js":"9","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\constants.js":"10","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\GetCommittedAmount.js":"11"},{"size":219,"mtime":1639601796250,"results":"12","hashOfConfig":"13"},{"size":754,"mtime":1639601796209,"results":"14","hashOfConfig":"13"},{"size":1011,"mtime":1639601796230,"results":"15","hashOfConfig":"13"},{"size":176,"mtime":1639601796281,"results":"16","hashOfConfig":"13"},{"size":13474,"mtime":1639603870537,"results":"17","hashOfConfig":"13"},{"size":1811,"mtime":1639601796258,"results":"18","hashOfConfig":"13"},{"size":10324,"mtime":1639604098684,"results":"19","hashOfConfig":"13"},{"size":1641,"mtime":1639601796271,"results":"20","hashOfConfig":"13"},{"size":1408,"mtime":1639601796260,"results":"21","hashOfConfig":"13"},{"size":48,"mtime":1639601796248,"results":"22","hashOfConfig":"13"},{"size":1869,"mtime":1639601796230,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1atme3r",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\index.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\App.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\MainPage.js",["52"],"import { useSelector } from \"react-redux\";\nimport ElectionList from \"./ElectionList\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { NavLink, Route, Routes } from \"react-router-dom\";\nimport TopNavigationBar from \"./statics/TopNavigationBar\";\nimport BottomNavigationBar from \"./statics/BottomNavigationBar\";\nimport Test from \"./statics/Test\";\n\nconst MainPage = () => {\n  const [width] = useWindowSize();\n  const darkTheme = useSelector((state) => state.status.darkTheme);\n\n  return (\n    <main\n      className={`${\n        darkTheme ? \"dark_theme big_screen\" : \"light_theme big_screen\"\n      }`}\n      id=\"main_main\"\n    >\n      <TopNavigationBar darkTheme={darkTheme} />\n\n      {/* <Test /> */}\n\n      <Routes>\n        <Route path=\"/\" element={<ElectionList />} />\n        <Route path=\"/home\" element={<ElectionList />} />\n      </Routes>\n\n      {width <= 850 && (\n        <BottomNavigationBar NavLink={NavLink} darkTheme={darkTheme} />\n      )}\n    </main>\n  );\n};\n\nexport default MainPage;\n","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\store\\stores.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\ElectionList.js",["53","54","55","56"],"import _ from \"lodash\";\nimport $ from \"jquery\";\nimport \"./styles/electionlist.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport algosdk from \"algosdk\";\nimport { ASSET_ID } from \"./constants\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\n\nconst ElectionList = () => {\n  const dispatch = useDispatch();\n\n  const addressNum = useSelector((state) => state.status.addressNum);\n\n  const algodClient = new algosdk.Algodv2(\n    {\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\n    },\n    \"https://testnet-algorand.api.purestake.io/ps2\",\n    \"\"\n  );\n  const walletAddress = localStorage.getItem(\"address\");\n  const walletType = localStorage.getItem(\"wallet-type\");\n\n  const addresses = localStorage.getItem(\"addresses\")?.split(\",\");\n\n  const isThereAddress = localStorage.getItem(\"address\");\n\n  const data = [\n    {\n      candidates: [\n        {\n          address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n          image: \"\",\n          name: \"Yes\",\n        },\n\n        {\n          address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n          image: \"\",\n          name: \"No\",\n        },\n      ],\n      choice_per_vote: 1,\n      created_at: \"2021-12-08T10:32:15.878473\",\n      description: \"Lorem ipsum\",\n      is_finished: false,\n      is_started: true,\n      process_image: \"https://i.postimg.cc/90XSyrjH/choice.png\",\n      slug: \"CHOICE-COIN-IS-A-STANDARD-ALGORAND-ASSET-b0c7db\",\n      title: \"CHOICE COIN IS A STANDARD ALGORAND ASSET\",\n      wallet: {\n        address: \"NX4T2FTIGNPVPSMEXJFMMKD46O4HRCPN25BDHOUW2SWXANZPQBZEDYKDVE\",\n      },\n    },\n  ];\n\n  const myAlgoConnect = async (voteData) => {\n    const myAlgoWallet = new MyAlgoConnect();\n\n    try {\n      const accounts = await myAlgoWallet.connect({\n        shouldSelectOneAccount: true,\n      });\n      const address = !!isThereAddress ? isThereAddress : accounts[0].address;\n\n      const myAccountInfo = await algodClient\n        .accountInformation(\n          !!isThereAddress ? isThereAddress : accounts[0].address\n        )\n        .do();\n\n      // get balance of the voter\n      const balance = myAccountInfo.assets\n        ? myAccountInfo.assets.find(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          ).amount / 100\n        : 0;\n\n      // check if the voter address has Choice\n      const containsChoice = myAccountInfo.assets\n        ? myAccountInfo.assets.some(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          )\n        : false;\n\n      // if the address has no ASAs\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({ type: \"close_vote_modal\" });\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({ type: \"close_vote_modal\" });\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams,\n      });\n\n      const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\n      await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n      // close modal.\n      dispatch({ type: \"close_vote_modal\" });\n\n      // alert success\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const algoSignerConnect = async (voteData) => {\n    try {\n      if (typeof window.AlgoSigner === \"undefined\") {\n        window.open(\n          \"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\",\n          \"_blank\"\n        );\n      } else {\n        await window.AlgoSigner.connect({\n          ledger: \"TestNet\",\n        });\n        const accounts = await window.AlgoSigner.accounts({\n          ledger: \"TestNet\",\n        });\n\n        const address = !!isThereAddress ? isThereAddress : accounts[0].address;\n\n        const myAccountInfo = await algodClient\n          .accountInformation(\n            !!isThereAddress ? isThereAddress : accounts[0].address\n          )\n          .do();\n\n        // get balance of the voter\n        const balance = myAccountInfo.assets\n          ? myAccountInfo.assets.find(\n              (element) => element[\"asset-id\"] === ASSET_ID\n            ).amount / 100\n          : 0;\n\n        // check if the voter address has Choice\n        const containsChoice = myAccountInfo.assets\n          ? myAccountInfo.assets.some(\n              (element) => element[\"asset-id\"] === ASSET_ID\n            )\n          : false;\n\n        // if the address has no ASAs\n        if (myAccountInfo.assets.length === 0) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({ type: \"close_vote_modal\" });\n          return;\n        }\n\n        if (!containsChoice) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({ type: \"close_vote_modal\" });\n          return;\n        }\n\n        if (voteData.amount > balance) {\n          alert(\"You do not have sufficient balance to make this transaction.\");\n          return;\n        }\n\n        const suggestedParams = await algodClient.getTransactionParams().do();\n        const amountToSend = voteData.amount * 100;\n\n        const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: voteData.address,\n          amount: amountToSend,\n          assetIndex: ASSET_ID,\n          suggestedParams,\n        });\n\n        const signedTxn = await window.AlgoSigner.signTxn([\n          { txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte()) },\n        ]);\n        await algodClient\n          .sendRawTransaction(\n            window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)\n          )\n          .do();\n\n        // close modal.\n        dispatch({ type: \"close_vote_modal\" });\n\n        // alert success\n        alert(\"You have successfully placed your vote for this election\");\n        window.location.reload();\n      }\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const algoMobileConnect = async (voteData) => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n\n    try {\n      const address = !!isThereAddress ? isThereAddress : \"\";\n\n      const myAccountInfo = await algodClient.accountInformation(address).do();\n\n      const balance = myAccountInfo.assets\n        ? myAccountInfo.assets.find(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          ).amount / 100\n        : 0;\n\n      const containsChoice = myAccountInfo.assets\n        ? myAccountInfo.assets.some(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          )\n        : false;\n\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams,\n      });\n\n      const txnsToSign = [\n        {\n          txn: Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\n            \"base64\"\n          ),\n          message: \"Transaction using Mobile Wallet\",\n        },\n      ];\n\n      const requestParams = [txnsToSign];\n\n      const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n      const result = await connector.sendCustomRequest(request);\n\n      const decodedResult = result.map((element) => {\n        return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n      });\n\n      console.log(decodedResult);\n\n      await algodClient.sendRawTransaction(decodedResult).do();\n\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const placeVote = (address, amount, election) => {\n    if (!address) {\n      alert(\"Select an option to vote!!\");\n      return;\n    }\n\n    if (walletType === \"my-algo\") {\n      myAlgoConnect({ address, amount, election });\n    } else if (walletType === \"algosigner\") {\n      algoSignerConnect({ address, amount, election });\n    } else if (walletType === \"walletconnect\") {\n      algoMobileConnect({ address, amount, election });\n    }\n  };\n\n  return (\n    <div className=\"ptt_elt\">\n      <div className=\"ptt_elt_inn\">\n        <div className=\"ptt_hd\">\n          <p><strong>CHOICE-COIN VOTING PARTICIPATION</strong></p>\n        </div>\n        <ul className=\"card_list\">\n          {data?.map((slug, index) => {\n            return (\n              <div className=\"card_cont\" key={index}>\n                <div className=\"card_r1\">\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <div className=\"card_elt_img\">\n                      {slug.process_image ? (\n                        <img src={slug.process_image} alt=\"\" />\n                      ) : (\n                        <i\n                          className=\"uil uil-asterisk\"\n                          style={{ paddingLeft: \"2px\", paddingBottom: \"2px\" }}\n                        />\n                      )}\n                    </div>\n                    <div className=\"card_elt_tit\">{slug.title}</div>\n                  </div>\n\n                  {/* <div className=\"electionEndTime\">Ends on:</div> */}\n                </div>\n\n                <div className=\"card_elt_desc\">{slug?.card_desc}</div>\n\n                <div className=\"card_cand\">\n                  <div className=\"card_cand_hd\">\n                    <div className=\"amountToCommit\">\n                      <p>Amount of Choice to commit:</p>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        placeholder=\"1\"\n                        className=\"amtToCommitInp\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"vote_collap\">\n                    <div className=\"card_cand_hd\">Options</div>\n                    <ul className=\"vote_now_list\">\n                      {slug?.candidates?.map((item, index) => {\n                        return (\n                          <li key={index}>\n                            <input\n                              type=\"radio\"\n                              name=\"options\"\n                              value={item.address}\n                            />\n\n                            <div className=\"vote_img_cont\">\n                              {!!item.image ? (\n                                <img src={item.image} alt=\"\" />\n                              ) : (\n                                <i className=\"uil uil-asterisk\"></i>\n                              )}\n                            </div>\n                            <p>{item.name}</p>\n                          </li>\n                        );\n                      })}\n                    </ul>\n\n                    <div className=\"rec_vote_cont\">\n                      <button\n                        className=\"record_vote\"\n                        onClick={(e) => {\n                          var voteVal = $(e.target)\n                            .closest(\".card_cand\")\n                            .find(\".vote_now_list\");\n\n                          var amountToSend = $(e.target)\n                            .closest(\".card_cand\")\n                            .find(\".amtToCommitInp\")\n                            .val();\n\n                          var amt = !!amountToSend\n                            ? amountToSend\n                            : slug.choice_per_vote;\n\n                          placeVote(\n                            $(\"input[name=options]:checked\", voteVal).val(),\n                            amt,\n                            slug\n                          );\n                        }}\n                      >\n                        Submit vote\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ElectionList;\n",["57","58"],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\BottomNavigationBar.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\TopNavigationBar.js",["59"],"import algosdk from \"algosdk\";\nimport { ASSET_ID } from \"../constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport GetCommittedAmount from \"../GetCommittedAmount\";\n\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\n\nconst TopNavigationBar = ({ darkTheme }) => {\n  const dispatch = useDispatch();\n\n  const addressNum = useSelector((state) => state.status.addressNum);\n  const isWalletConnected =\n    localStorage.getItem(\"wallet-type\") === null ? false : true;\n\n  const LogOut = () => {\n    localStorage.removeItem(\"address\");\n    localStorage.removeItem(\"addresses\");\n    localStorage.removeItem(\"wallet-type\");\n    localStorage.removeItem(\"walletconnect\");\n    window.location.reload();\n    console.log(\"data\");\n  };\n\n  const setMode = () => {\n    if (!darkTheme) {\n      localStorage.setItem(\"mode\", \"dark\");\n      dispatch({ type: \"dark_mode\" });\n    } else {\n      localStorage.setItem(\"mode\", \"light\");\n      dispatch({ type: \"light_mode\" });\n    }\n  };\n\n  const [width] = useWindowSize();\n  const [balance, setBalance] = useState([]);\n\n  const algodClient = new algosdk.Algodv2(\n    {\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\n    },\n    \"https://testnet-algorand.api.purestake.io/ps2\",\n    \"\"\n  );\n\n  const walletAddress = localStorage.getItem(\"address\");\n  const addresses = localStorage.getItem(\"addresses\")?.split(\",\");\n\n  let addrArr = [];\n\n  useEffect(() => {\n    addresses?.forEach(async (item) => {\n      const myAccountInfo = await algodClient.accountInformation(item).do();\n      const bal =\n        myAccountInfo.assets.find((element) => element[\"asset-id\"] === ASSET_ID)\n          ?.amount / 100;\n\n      addrArr.push({ balance: !!bal ? bal : 0, address: item });\n\n      if (addrArr?.length === addresses?.length) {\n        console.log(addrArr);\n        dispatch({\n          type: \"setAlgoAddress\",\n          addressIndex: 0,\n          addr: addrArr[0]?.address,\n        });\n        setBalance(addrArr);\n      }\n    });\n  }, []);\n\n  const myAlgoConnect = async () => {\n    const myAlgoWallet = new MyAlgoConnect();\n\n    try {\n      const accounts = await myAlgoWallet.connect({\n        shouldSelectOneAccount: true,\n      });\n\n      const addresses = accounts.map((item) => item?.address);\n      const address = accounts[0].address;\n\n      // close modal.\n      localStorage.setItem(\"wallet-type\", \"my-algo\");\n      localStorage.setItem(\"address\", address);\n      localStorage.setItem(\"addresses\", addresses);\n\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = () => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n\n    if (!connector.connected) {\n      connector.createSession();\n    }\n\n    connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const { accounts } = payload.params[0];\n\n      const addresses = accounts.map((item) => item);\n      const address = accounts[0];\n\n      localStorage.setItem(\"wallet-type\", \"walletconnect\");\n      localStorage.setItem(\"address\", address);\n      localStorage.setItem(\"addresses\", addresses);\n\n      window.location.reload();\n    });\n\n    connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const { accounts } = payload.params[0];\n\n      const addresses = accounts.map((item) => item);\n      const address = accounts[0];\n\n      localStorage.setItem(\"wallet-type\", \"walletconnect\");\n      localStorage.setItem(\"address\", address);\n      localStorage.setItem(\"addresses\", addresses);\n\n      window.location.reload();\n    });\n\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  };\n\n  const algoSignerConnect = async () => {\n    try {\n      if (typeof window.AlgoSigner === \"undefined\") {\n        window.open(\n          \"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\",\n          \"_blank\"\n        );\n      } else {\n        await window.AlgoSigner.connect({\n          ledger: \"TestNet\",\n        });\n        const accounts = await window.AlgoSigner.accounts({\n          ledger: \"TestNet\",\n        });\n\n        const addresses = accounts.map((item) => item?.address);\n        const address = accounts[0].address;\n\n        // close modal.\n        localStorage.setItem(\"wallet-type\", \"algosigner\");\n        localStorage.setItem(\"address\", address);\n        localStorage.setItem(\"addresses\", addresses);\n\n        window.location.reload();\n      }\n    } catch (error) {\n      alert(\"AlgoSigner not set up yet!\");\n    }\n  };\n\n  return (\n    <header className=\"small_header\">\n      <div className=\"small_header_inn\">\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            textTransform: \"uppercase\",\n          }}\n        >\n          <strong>Choice Coin</strong>\n        </div>\n\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          {!!isWalletConnected ? (\n            <>\n              <div className=\"addrDisplay\">\n                <div className=\"addrDispMain\">\n                  <div className=\"addrDisplayInn\">\n                    <div className=\"addrBalance\">\n                      {balance[addressNum]?.balance} Choice\n                    </div>\n\n                    <CopyToClipboard text={balance[addressNum]?.address}>\n                      <div className=\"addressTxt\">\n                        <p>{balance[addressNum]?.address}</p>\n                        <i className=\"uil uil-copy\"></i>\n                      </div>\n                    </CopyToClipboard>\n                  </div>\n                </div>\n\n                <div className=\"dropDownConnect_items\">\n                  {balance?.map((item, index) => {\n                    return (\n                      <div\n                        key={index}\n                        className=\"dropDownConnect_item\"\n                        onClick={() => {\n                          dispatch({\n                            type: \"setAlgoAddress\",\n                            addressIndex: index,\n                            addr: item.address,\n                          });\n                        }}\n                      >\n                        <p className=\"dropDownConnect_item_txt\">\n                          {item.address}\n                        </p>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"dropDownConnect\">\n              <div className=\"dropDownConnect_button\">\n                <button className=\"connect_wallet_button\">\n                  <p>\n                    Connect Wallet\n                    <i\n                      className=\"uil uil-angle-down\"\n                      style={{ fontSize: \"18px\" }}\n                    />\n                  </p>\n                </button>\n              </div>\n\n              <div className=\"dropDownConnect_items\">\n                <div className=\"dropDownConnect_item\" onClick={myAlgoConnect}>\n                  <div className=\"dropDownConnect_img\">\n                    <img\n                      src=\"https://i.postimg.cc/76r9kXSr/My-Algo-Logo-4c21daa4.png\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <p className=\"dropDownConnect_item_txt\">Algo-Wallet</p>\n                </div>\n\n                <div\n                  className=\"dropDownConnect_item\"\n                  onClick={algoSignerConnect}\n                >\n                  <div className=\"dropDownConnect_img\">\n                    <img\n                      src=\"https://i.postimg.cc/L4JB4JwT/Algo-Signer-2ec35000.png\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <p className=\"dropDownConnect_item_txt\">\n                    {typeof window.AlgoSigner === undefined\n                      ? \"Install AlgoSigner\"\n                      : \"AlgoSigner\"}\n                  </p>\n                </div>\n\n                <div className=\"dropDownConnect_item\" onClick={connectWallet}>\n                  <div className=\"dropDownConnect_img\">\n                    <img\n                      src=\"https://i.postimg.cc/J7JZ4cFb/icon-37675b59-1.png\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <p className=\"dropDownConnect_item_txt\">\n                    Algorand Wallet(MOBILE)\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        {/*  */}\n      </div>\n\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          fontSize: \"13px\",\n          fontWeight: \"500\",\n          wordSpacing: \"1px\",\n          alignItems: \"center\",\n          color: walletAddress ? \"#fff\" : \"var(--wht)\",\n          padding: \"0px 5vw\",\n          letterSpacing: \"0.5px\",\n          textTransform: \"uppercase\",\n          background: walletAddress ? \"var(--main-col)\" : \"var(--background)\",\n          height: \"var(--sm-hd-height-half)\",\n          justifyContent: \"space-between\",\n          borderTop: \"1px solid var(--border-default)\",\n        }}\n      >\n        <p style={{ opacity: \"0.9\" }}>\n          Amount of Choice Coin used for voting:&nbsp;\n          {!!walletAddress && <GetCommittedAmount />} $Choice\n        </p>\n\n        {width > 850 && (\n          <ul className=\"listNavBig\">\n            <li onClick={setMode}>\n              LIGHT/DARK \n              {darkTheme ? (\n                <i className=\"uil uil-brightness-low\"></i>\n              ) : (\n                <i className=\"uil uil-moon\"></i>\n              )}\n            </li>\n            <li onClick={LogOut}>Sign Out</li>\n          </ul>\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default TopNavigationBar;\n","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\store\\reducers.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\Test.js",["60","61","62"],"import { WalletSelector } from \"@xbacked-dao/algorand-wallet-select\";\n\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport algosdk from \"algosdk\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { useEffect } from \"react\";\n\nconst Test = () => {\n  //\n\n  useEffect(() => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n\n    if (!connector.connected) {\n      connector.createSession();\n    }\n\n    connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const { accounts } = payload.params[0];\n\n      console.log(accounts);\n    });\n\n    connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const { accounts } = payload.params[0];\n\n      console.log(accounts);\n    });\n\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  }, []);\n\n  const returnWallet = async (data) => {\n    if (!!data) {\n      console.log(data?.connector?.check());\n      console.log(await data.connector.connect());\n      console.log(data.connector.provider);\n    }\n  };\n\n  return <WalletSelector returnWallet={returnWallet} wallets=\"walletconnect\" />;\n\n  return <div></div>;\n};\n\nexport default Test;\n","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\constants.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\GetCommittedAmount.js",["63"],"import algosdk from \"algosdk\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = { \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\" };\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst GetCommittedAmount = () => {\n  const addressNum = useSelector((state) => state.status.addressNum);\n  const walletAddress = localStorage.getItem(\"address\");\n  const userAddress = !!walletAddress\n    ? walletAddress\n    : localStorage.getItem(\"addresses\").split(\",\")[addressNum];\n\n  // const userAddress = localStorage.getItem(\"address\");\n\n  const options = [\n    {\n      address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n      image: \"\",\n      name: \"Yes\",\n    },\n\n    {\n      address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n      image: \"\",\n      name: \"No\",\n    },\n  ];\n\n  const firstAddress = options[0].address;\n  const secondAddress = options[1].address;\n  let txnAmt = 0;\n\n  const [Amt, setAmt] = useState(0);\n\n  const getIt = async () => {\n    try {\n      let pastTxn = await indexerClient\n        .searchForTransactions()\n        .address(userAddress)\n        .assetID(CHOICE_ID)\n        .limit()\n        .do();\n      const txns = pastTxn[\"transactions\"];\n\n      txns.forEach((item) => {\n        const txn = item[\"asset-transfer-transaction\"];\n        if (\n          txn[\"receiver\"] === firstAddress ||\n          txn[\"receiver\"] === secondAddress\n        ) {\n          txnAmt = txnAmt + txn[\"amount\"] / 100;\n        }\n      });\n\n      setAmt(txnAmt);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getIt();\n  }, [userAddress]);\n\n  return <>{Amt}</>;\n};\n\nexport default GetCommittedAmount;\n",{"ruleId":"64","severity":1,"message":"65","line":7,"column":8,"nodeType":"66","messageId":"67","endLine":7,"endColumn":12},{"ruleId":"64","severity":1,"message":"68","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":9},{"ruleId":"64","severity":1,"message":"69","line":16,"column":9,"nodeType":"66","messageId":"67","endLine":16,"endColumn":19},{"ruleId":"64","severity":1,"message":"70","line":25,"column":9,"nodeType":"66","messageId":"67","endLine":25,"endColumn":22},{"ruleId":"64","severity":1,"message":"71","line":28,"column":9,"nodeType":"66","messageId":"67","endLine":28,"endColumn":18},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":74,"column":6,"nodeType":"78","endLine":74,"endColumn":8,"suggestions":"79"},{"ruleId":"64","severity":1,"message":"80","line":5,"column":8,"nodeType":"66","messageId":"67","endLine":5,"endColumn":15},{"ruleId":"64","severity":1,"message":"81","line":6,"column":10,"nodeType":"66","messageId":"67","endLine":6,"endColumn":30},{"ruleId":"82","severity":1,"message":"83","line":59,"column":3,"nodeType":"84","messageId":"85","endLine":59,"endColumn":22},{"ruleId":"76","severity":1,"message":"86","line":68,"column":6,"nodeType":"78","endLine":68,"endColumn":19,"suggestions":"87"},"no-unused-vars","'Test' is defined but never used.","Identifier","unusedVar","'_' is defined but never used.","'addressNum' is assigned a value but never used.","'walletAddress' is assigned a value but never used.","'addresses' is assigned a value but never used.","no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addrArr', 'addresses', 'algodClient', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["90"],"'algosdk' is defined but never used.","'formatJsonRpcRequest' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","React Hook useEffect has a missing dependency: 'getIt'. Either include it or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [addrArr, addresses, algodClient, dispatch]",{"range":"96","text":"97"},"Update the dependencies array to be: [getIt, userAddress]",{"range":"98","text":"99"},[2263,2265],"[addrArr, addresses, algodClient, dispatch]",[1792,1805],"[getIt, userAddress]"]