[{"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\index.js":"1","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\App.js":"2","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\MainPage.js":"3","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\store\\stores.js":"4","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\ElectionList.js":"5","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\BottomNavigationBar.js":"6","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\TopNavigationBar.js":"7","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\store\\reducers.js":"8","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\Test.js":"9","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\constants.js":"10","C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\GetCommittedAmount.js":"11"},{"size":219,"mtime":1639601796250,"results":"12","hashOfConfig":"13"},{"size":754,"mtime":1639601796209,"results":"14","hashOfConfig":"13"},{"size":1011,"mtime":1639601796230,"results":"15","hashOfConfig":"13"},{"size":176,"mtime":1639601796281,"results":"16","hashOfConfig":"13"},{"size":13474,"mtime":1639603870537,"results":"17","hashOfConfig":"13"},{"size":1811,"mtime":1639601796258,"results":"18","hashOfConfig":"13"},{"size":10324,"mtime":1639604098684,"results":"19","hashOfConfig":"13"},{"size":1641,"mtime":1639601796271,"results":"20","hashOfConfig":"13"},{"size":1408,"mtime":1639601796260,"results":"21","hashOfConfig":"13"},{"size":48,"mtime":1639601796248,"results":"22","hashOfConfig":"13"},{"size":1869,"mtime":1639601796230,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1atme3r",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\index.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\App.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\MainPage.js",["48"],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\store\\stores.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\ElectionList.js",["49","50","51","52"],"import _ from \"lodash\";\nimport $ from \"jquery\";\nimport \"./styles/electionlist.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport algosdk from \"algosdk\";\nimport { ASSET_ID } from \"./constants\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\n\nconst ElectionList = () => {\n  const dispatch = useDispatch();\n\n  const addressNum = useSelector((state) => state.status.addressNum);\n\n  const algodClient = new algosdk.Algodv2(\n    {\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\n    },\n    \"https://testnet-algorand.api.purestake.io/ps2\",\n    \"\"\n  );\n  const walletAddress = localStorage.getItem(\"address\");\n  const walletType = localStorage.getItem(\"wallet-type\");\n\n  const addresses = localStorage.getItem(\"addresses\")?.split(\",\");\n\n  const isThereAddress = localStorage.getItem(\"address\");\n\n  const data = [\n    {\n      candidates: [\n        {\n          address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n          image: \"\",\n          name: \"Yes\",\n        },\n\n        {\n          address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n          image: \"\",\n          name: \"No\",\n        },\n      ],\n      choice_per_vote: 1,\n      created_at: \"2021-12-08T10:32:15.878473\",\n      description: \"Lorem ipsum\",\n      is_finished: false,\n      is_started: true,\n      process_image: \"https://i.postimg.cc/90XSyrjH/choice.png\",\n      slug: \"CHOICE-COIN-IS-A-STANDARD-ALGORAND-ASSET-b0c7db\",\n      title: \"CHOICE COIN IS A STANDARD ALGORAND ASSET\",\n      wallet: {\n        address: \"NX4T2FTIGNPVPSMEXJFMMKD46O4HRCPN25BDHOUW2SWXANZPQBZEDYKDVE\",\n      },\n    },\n  ];\n\n  const myAlgoConnect = async (voteData) => {\n    const myAlgoWallet = new MyAlgoConnect();\n\n    try {\n      const accounts = await myAlgoWallet.connect({\n        shouldSelectOneAccount: true,\n      });\n      const address = !!isThereAddress ? isThereAddress : accounts[0].address;\n\n      const myAccountInfo = await algodClient\n        .accountInformation(\n          !!isThereAddress ? isThereAddress : accounts[0].address\n        )\n        .do();\n\n      // get balance of the voter\n      const balance = myAccountInfo.assets\n        ? myAccountInfo.assets.find(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          ).amount / 100\n        : 0;\n\n      // check if the voter address has Choice\n      const containsChoice = myAccountInfo.assets\n        ? myAccountInfo.assets.some(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          )\n        : false;\n\n      // if the address has no ASAs\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({ type: \"close_vote_modal\" });\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({ type: \"close_vote_modal\" });\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams,\n      });\n\n      const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\n      await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n      // close modal.\n      dispatch({ type: \"close_vote_modal\" });\n\n      // alert success\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const algoSignerConnect = async (voteData) => {\n    try {\n      if (typeof window.AlgoSigner === \"undefined\") {\n        window.open(\n          \"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\",\n          \"_blank\"\n        );\n      } else {\n        await window.AlgoSigner.connect({\n          ledger: \"TestNet\",\n        });\n        const accounts = await window.AlgoSigner.accounts({\n          ledger: \"TestNet\",\n        });\n\n        const address = !!isThereAddress ? isThereAddress : accounts[0].address;\n\n        const myAccountInfo = await algodClient\n          .accountInformation(\n            !!isThereAddress ? isThereAddress : accounts[0].address\n          )\n          .do();\n\n        // get balance of the voter\n        const balance = myAccountInfo.assets\n          ? myAccountInfo.assets.find(\n              (element) => element[\"asset-id\"] === ASSET_ID\n            ).amount / 100\n          : 0;\n\n        // check if the voter address has Choice\n        const containsChoice = myAccountInfo.assets\n          ? myAccountInfo.assets.some(\n              (element) => element[\"asset-id\"] === ASSET_ID\n            )\n          : false;\n\n        // if the address has no ASAs\n        if (myAccountInfo.assets.length === 0) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({ type: \"close_vote_modal\" });\n          return;\n        }\n\n        if (!containsChoice) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({ type: \"close_vote_modal\" });\n          return;\n        }\n\n        if (voteData.amount > balance) {\n          alert(\"You do not have sufficient balance to make this transaction.\");\n          return;\n        }\n\n        const suggestedParams = await algodClient.getTransactionParams().do();\n        const amountToSend = voteData.amount * 100;\n\n        const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: voteData.address,\n          amount: amountToSend,\n          assetIndex: ASSET_ID,\n          suggestedParams,\n        });\n\n        const signedTxn = await window.AlgoSigner.signTxn([\n          { txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte()) },\n        ]);\n        await algodClient\n          .sendRawTransaction(\n            window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)\n          )\n          .do();\n\n        // close modal.\n        dispatch({ type: \"close_vote_modal\" });\n\n        // alert success\n        alert(\"You have successfully placed your vote for this election\");\n        window.location.reload();\n      }\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const algoMobileConnect = async (voteData) => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n\n    try {\n      const address = !!isThereAddress ? isThereAddress : \"\";\n\n      const myAccountInfo = await algodClient.accountInformation(address).do();\n\n      const balance = myAccountInfo.assets\n        ? myAccountInfo.assets.find(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          ).amount / 100\n        : 0;\n\n      const containsChoice = myAccountInfo.assets\n        ? myAccountInfo.assets.some(\n            (element) => element[\"asset-id\"] === ASSET_ID\n          )\n        : false;\n\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams,\n      });\n\n      const txnsToSign = [\n        {\n          txn: Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\n            \"base64\"\n          ),\n          message: \"Transaction using Mobile Wallet\",\n        },\n      ];\n\n      const requestParams = [txnsToSign];\n\n      const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n      const result = await connector.sendCustomRequest(request);\n\n      const decodedResult = result.map((element) => {\n        return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n      });\n\n      console.log(decodedResult);\n\n      await algodClient.sendRawTransaction(decodedResult).do();\n\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const placeVote = (address, amount, election) => {\n    if (!address) {\n      alert(\"Select an option to vote!!\");\n      return;\n    }\n\n    if (walletType === \"my-algo\") {\n      myAlgoConnect({ address, amount, election });\n    } else if (walletType === \"algosigner\") {\n      algoSignerConnect({ address, amount, election });\n    } else if (walletType === \"walletconnect\") {\n      algoMobileConnect({ address, amount, election });\n    }\n  };\n\n  return (\n    <div className=\"ptt_elt\">\n      <div className=\"ptt_elt_inn\">\n        <div className=\"ptt_hd\">\n          <p><strong>CHOICE-COIN VOTING PARTICIPATION</strong></p>\n        </div>\n        <ul className=\"card_list\">\n          {data?.map((slug, index) => {\n            return (\n              <div className=\"card_cont\" key={index}>\n                <div className=\"card_r1\">\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <div className=\"card_elt_img\">\n                      {slug.process_image ? (\n                        <img src={slug.process_image} alt=\"\" />\n                      ) : (\n                        <i\n                          className=\"uil uil-asterisk\"\n                          style={{ paddingLeft: \"2px\", paddingBottom: \"2px\" }}\n                        />\n                      )}\n                    </div>\n                    <div className=\"card_elt_tit\">{slug.title}</div>\n                  </div>\n\n                  {/* <div className=\"electionEndTime\">Ends on:</div> */}\n                </div>\n\n                <div className=\"card_elt_desc\">{slug?.card_desc}</div>\n\n                <div className=\"card_cand\">\n                  <div className=\"card_cand_hd\">\n                    <div className=\"amountToCommit\">\n                      <p>Amount of Choice to commit:</p>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        placeholder=\"1\"\n                        className=\"amtToCommitInp\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"vote_collap\">\n                    <div className=\"card_cand_hd\">Options</div>\n                    <ul className=\"vote_now_list\">\n                      {slug?.candidates?.map((item, index) => {\n                        return (\n                          <li key={index}>\n                            <input\n                              type=\"radio\"\n                              name=\"options\"\n                              value={item.address}\n                            />\n\n                            <div className=\"vote_img_cont\">\n                              {!!item.image ? (\n                                <img src={item.image} alt=\"\" />\n                              ) : (\n                                <i className=\"uil uil-asterisk\"></i>\n                              )}\n                            </div>\n                            <p>{item.name}</p>\n                          </li>\n                        );\n                      })}\n                    </ul>\n\n                    <div className=\"rec_vote_cont\">\n                      <button\n                        className=\"record_vote\"\n                        onClick={(e) => {\n                          var voteVal = $(e.target)\n                            .closest(\".card_cand\")\n                            .find(\".vote_now_list\");\n\n                          var amountToSend = $(e.target)\n                            .closest(\".card_cand\")\n                            .find(\".amtToCommitInp\")\n                            .val();\n\n                          var amt = !!amountToSend\n                            ? amountToSend\n                            : slug.choice_per_vote;\n\n                          placeVote(\n                            $(\"input[name=options]:checked\", voteVal).val(),\n                            amt,\n                            slug\n                          );\n                        }}\n                      >\n                        Submit vote\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ElectionList;\n",["53","54"],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\BottomNavigationBar.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\TopNavigationBar.js",["55"],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\store\\reducers.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\statics\\Test.js",["56","57","58"],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\constants.js",[],"C:\\Users\\EUGENE\\ChoiceDev\\Choice-Coin\\src\\GetCommittedAmount.js",["59"],{"ruleId":"60","severity":1,"message":"61","line":7,"column":8,"nodeType":"62","messageId":"63","endLine":7,"endColumn":12},{"ruleId":"60","severity":1,"message":"64","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":9},{"ruleId":"60","severity":1,"message":"65","line":16,"column":9,"nodeType":"62","messageId":"63","endLine":16,"endColumn":19},{"ruleId":"60","severity":1,"message":"66","line":25,"column":9,"nodeType":"62","messageId":"63","endLine":25,"endColumn":22},{"ruleId":"60","severity":1,"message":"67","line":28,"column":9,"nodeType":"62","messageId":"63","endLine":28,"endColumn":18},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":74,"column":6,"nodeType":"74","endLine":74,"endColumn":8,"suggestions":"75"},{"ruleId":"60","severity":1,"message":"76","line":5,"column":8,"nodeType":"62","messageId":"63","endLine":5,"endColumn":15},{"ruleId":"60","severity":1,"message":"77","line":6,"column":10,"nodeType":"62","messageId":"63","endLine":6,"endColumn":30},{"ruleId":"78","severity":1,"message":"79","line":59,"column":3,"nodeType":"80","messageId":"81","endLine":59,"endColumn":22},{"ruleId":"72","severity":1,"message":"82","line":68,"column":6,"nodeType":"74","endLine":68,"endColumn":19,"suggestions":"83"},"no-unused-vars","'Test' is defined but never used.","Identifier","unusedVar","'_' is defined but never used.","'addressNum' is assigned a value but never used.","'walletAddress' is assigned a value but never used.","'addresses' is assigned a value but never used.","no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addrArr', 'addresses', 'algodClient', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["86"],"'algosdk' is defined but never used.","'formatJsonRpcRequest' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","React Hook useEffect has a missing dependency: 'getIt'. Either include it or remove the dependency array.",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [addrArr, addresses, algodClient, dispatch]",{"range":"92","text":"93"},"Update the dependencies array to be: [getIt, userAddress]",{"range":"94","text":"95"},[2263,2265],"[addrArr, addresses, algodClient, dispatch]",[1792,1805],"[getIt, userAddress]"]