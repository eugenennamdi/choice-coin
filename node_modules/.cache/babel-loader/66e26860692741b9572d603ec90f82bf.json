{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport algosdk from \"algosdk\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = {\n  \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\"\n};\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst GetCommittedAmount = () => {\n  _s();\n\n  const addressNum = useSelector(state => state.status.addressNum);\n  const walletAddress = localStorage.getItem(\"address\");\n  const userAddress = !!walletAddress ? walletAddress : localStorage.getItem(\"addresses\").split(\",\")[addressNum]; // const userAddress = localStorage.getItem(\"address\");\n\n  const options = [{\n    address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n    image: \"\",\n    name: \"Yes\"\n  }, {\n    address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n    image: \"\",\n    name: \"No\"\n  }];\n  const firstAddress = options[0].address;\n  const secondAddress = options[1].address;\n  let txnAmt = 0;\n  const [Amt, setAmt] = useState(0);\n\n  const getIt = async () => {\n    try {\n      let pastTxn = await indexerClient.searchForTransactions().address(userAddress).assetID(CHOICE_ID).limit().do();\n      const txns = pastTxn[\"transactions\"];\n      txns.forEach(item => {\n        const txn = item[\"asset-transfer-transaction\"];\n\n        if (txn[\"receiver\"] === firstAddress || txn[\"receiver\"] === secondAddress) {\n          txnAmt = txnAmt + txn[\"amount\"] / 100;\n        }\n      });\n      setAmt(txnAmt);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getIt();\n  }, [userAddress]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Amt\n  }, void 0, false);\n};\n\n_s(GetCommittedAmount, \"IJVqL1CRlXXx5kq+kc271Cs0Qpk=\", false, function () {\n  return [useSelector];\n});\n\n_c = GetCommittedAmount;\nexport default GetCommittedAmount;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetCommittedAmount\");","map":{"version":3,"sources":["C:/Users/EUGENE/ChoiceDev/Choice-Coin/src/GetCommittedAmount.js"],"names":["algosdk","useEffect","useState","useSelector","port","CHOICE_ID","indexerAddress","token","indexerClient","Indexer","GetCommittedAmount","addressNum","state","status","walletAddress","localStorage","getItem","userAddress","split","options","address","image","name","firstAddress","secondAddress","txnAmt","Amt","setAmt","getIt","pastTxn","searchForTransactions","assetID","limit","do","txns","forEach","item","txn","error","console","log"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,SAAS,GAAG,QAAlB;AACA,MAAMC,cAAc,GAAG,gDAAvB;AACA,MAAMC,KAAK,GAAG;AAAE,eAAa;AAAf,CAAd;AACA,MAAMC,aAAa,GAAG,IAAIR,OAAO,CAACS,OAAZ,CAAoBF,KAApB,EAA2BD,cAA3B,EAA2CF,IAA3C,CAAtB;;AAEA,MAAMM,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,UAAU,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaF,UAAzB,CAA9B;AACA,QAAMG,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAtB;AACA,QAAMC,WAAW,GAAG,CAAC,CAACH,aAAF,GAChBA,aADgB,GAEhBC,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCE,KAAlC,CAAwC,GAAxC,EAA6CP,UAA7C,CAFJ,CAH+B,CAO/B;;AAEA,QAAMQ,OAAO,GAAG,CACd;AACEC,IAAAA,OAAO,EAAE,4DADX;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADc,EAOd;AACEF,IAAAA,OAAO,EAAE,4DADX;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAPc,CAAhB;AAcA,QAAMC,YAAY,GAAGJ,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAhC;AACA,QAAMI,aAAa,GAAGL,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAjC;AACA,MAAIK,MAAM,GAAG,CAAb;AAEA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBzB,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAM0B,KAAK,GAAG,YAAY;AACxB,QAAI;AACF,UAAIC,OAAO,GAAG,MAAMrB,aAAa,CAC9BsB,qBADiB,GAEjBV,OAFiB,CAETH,WAFS,EAGjBc,OAHiB,CAGT1B,SAHS,EAIjB2B,KAJiB,GAKjBC,EALiB,EAApB;AAMA,YAAMC,IAAI,GAAGL,OAAO,CAAC,cAAD,CAApB;AAEAK,MAAAA,IAAI,CAACC,OAAL,CAAcC,IAAD,IAAU;AACrB,cAAMC,GAAG,GAAGD,IAAI,CAAC,4BAAD,CAAhB;;AACA,YACEC,GAAG,CAAC,UAAD,CAAH,KAAoBd,YAApB,IACAc,GAAG,CAAC,UAAD,CAAH,KAAoBb,aAFtB,EAGE;AACAC,UAAAA,MAAM,GAAGA,MAAM,GAAGY,GAAG,CAAC,QAAD,CAAH,GAAgB,GAAlC;AACD;AACF,OARD;AAUAV,MAAAA,MAAM,CAACF,MAAD,CAAN;AACD,KApBD,CAoBE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAxBD;;AA0BArC,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,KAAK;AACN,GAFQ,EAEN,CAACX,WAAD,CAFM,CAAT;AAIA,sBAAO;AAAA,cAAGS;AAAH,mBAAP;AACD,CA5DD;;GAAMhB,kB;UACeP,W;;;KADfO,kB;AA8DN,eAAeA,kBAAf","sourcesContent":["import algosdk from \"algosdk\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = { \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\" };\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst GetCommittedAmount = () => {\n  const addressNum = useSelector((state) => state.status.addressNum);\n  const walletAddress = localStorage.getItem(\"address\");\n  const userAddress = !!walletAddress\n    ? walletAddress\n    : localStorage.getItem(\"addresses\").split(\",\")[addressNum];\n\n  // const userAddress = localStorage.getItem(\"address\");\n\n  const options = [\n    {\n      address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n      image: \"\",\n      name: \"Yes\",\n    },\n\n    {\n      address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n      image: \"\",\n      name: \"No\",\n    },\n  ];\n\n  const firstAddress = options[0].address;\n  const secondAddress = options[1].address;\n  let txnAmt = 0;\n\n  const [Amt, setAmt] = useState(0);\n\n  const getIt = async () => {\n    try {\n      let pastTxn = await indexerClient\n        .searchForTransactions()\n        .address(userAddress)\n        .assetID(CHOICE_ID)\n        .limit()\n        .do();\n      const txns = pastTxn[\"transactions\"];\n\n      txns.forEach((item) => {\n        const txn = item[\"asset-transfer-transaction\"];\n        if (\n          txn[\"receiver\"] === firstAddress ||\n          txn[\"receiver\"] === secondAddress\n        ) {\n          txnAmt = txnAmt + txn[\"amount\"] / 100;\n        }\n      });\n\n      setAmt(txnAmt);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getIt();\n  }, [userAddress]);\n\n  return <>{Amt}</>;\n};\n\nexport default GetCommittedAmount;\n"]},"metadata":{},"sourceType":"module"}