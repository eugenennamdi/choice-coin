{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"./popup/popup\"),\n    openPopup = _require.openPopup;\n\nvar _require2 = require(\"./utils/utils\"),\n    sleep = _require2.sleep,\n    prepareTxn = _require2.prepareTxn;\n\nvar Errors = require(\"./utils/errors\");\n\nvar Messaging = require(\"./messaging/Messaging\");\n\nvar bridge = new Messaging();\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nvar MyAlgoConnect = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @constructor\n   * @param {Options} [options] Operation options\n   */\n  function MyAlgoConnect(options) {\n    _classCallCheck(this, MyAlgoConnect);\n\n    /**\n     * @access private\n     * @type {Messaging}\n     */\n    this.bridge = bridge;\n    /**\n     * @access private\n     * @type {number} Popup Timeout\n     */\n\n    this.timeout = options && options.timeout ? options.timeout : 1600000;\n    /**\n     * @access private\n     * @type {string} Frame url\n     */\n\n    this.url = options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\";\n    if (this.url.endsWith(\"/\")) this.url = this.url.slice(0, -1);\n    /**\n     * @access private\n     * @description This is used to reuse the current connect opened popup\n     * @type {Window|null}\n     */\n\n    this.currentConnectPopup = null;\n    /**\n     * @access private\n     * @description This is used to reuse the current signtx opened popup\n     * @type {Window|null}\n     */\n\n    this.currentSigntxPopup = null;\n    /**\n     * @access private\n     * @description This is used to reuse the current signlogic opened popup\n     * @type {Window|null}\n     */\n\n    this.currentSignLogicSigPopup = null;\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to load accounts from storage.\n   * @param {ConnectionSettings} settings Connect settings\n   * @returns {Promise<string[]>} Returns allowed accounts by the user.\n   */\n\n\n  _createClass(MyAlgoConnect, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var settings,\n            res,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                settings = _args.length > 0 && _args[0] !== undefined ? _args[0] : {\n                  shouldSelectOneAccount: false\n                };\n\n                if (!this.currentConnectPopup) {\n                  _context.next = 4;\n                  break;\n                }\n\n                this.currentConnectPopup.focus();\n                throw new Error(Errors.WINDOW_IS_OPENED);\n\n              case 4:\n                _context.prev = 4;\n                this.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n                _context.next = 8;\n                return this.waitForWindowToLoad(this.currentConnectPopup);\n\n              case 8:\n                _context.next = 10;\n                return this.bridge.sendMessage(this.currentConnectPopup, {\n                  method: \"unlock\",\n                  params: {\n                    shouldSelectOneAccount: settings.shouldSelectOneAccount\n                  }\n                }, this.url, {\n                  waitForReply: true,\n                  timeout: this.timeout\n                });\n\n              case 10:\n                res = _context.sent;\n                if (this.currentConnectPopup) this.currentConnectPopup.close();\n                this.currentConnectPopup = null;\n\n                if (!(res.status === \"error\")) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw new Error(res.message);\n\n              case 15:\n                this.currentConnectPopup = null;\n                return _context.abrupt(\"return\", res.data.accounts);\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](4);\n                if (this.currentConnectPopup) this.currentConnectPopup.close();\n                this.currentConnectPopup = null;\n                throw _context.t0;\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 19]]);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n    /**\n     * @async\n     * @access public\n     * @description Open a new window to sign transaction.\n     * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n     * (The signer account must be the same for all transactions).\n     * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n     * transaction was an object or an array.\n     */\n\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(transaction) {\n        var txn, res, result, _iterator, _step, t;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (Array.isArray(transaction)) txn = Array.from(transaction).map(function (tx) {\n                  return prepareTxn(tx);\n                });else txn = prepareTxn(transaction);\n\n                if (!this.currentSigntxPopup) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                this.currentSigntxPopup.focus();\n                throw new Error(Errors.WINDOW_IS_OPENED);\n\n              case 4:\n                _context2.prev = 4;\n                this.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n                _context2.next = 8;\n                return this.waitForWindowToLoad(this.currentSigntxPopup);\n\n              case 8:\n                _context2.next = 10;\n                return this.bridge.sendMessage(this.currentSigntxPopup, {\n                  method: \"transaction\",\n                  params: {\n                    txn: txn\n                  }\n                }, this.url, {\n                  waitForReply: true,\n                  timeout: this.timeout\n                });\n\n              case 10:\n                res = _context2.sent;\n                if (this.currentSigntxPopup) this.currentSigntxPopup.close();\n                this.currentSigntxPopup = null;\n\n                if (!(res.status === \"error\")) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                throw new Error(res.message);\n\n              case 15:\n                if (!Array.isArray(res.data)) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                result = [];\n                _iterator = _createForOfIteratorHelper(res.data);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    t = _step.value;\n                    t.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n                    result.push(t);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context2.abrupt(\"return\", result);\n\n              case 20:\n                res.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n                return _context2.abrupt(\"return\", res.data);\n\n              case 24:\n                _context2.prev = 24;\n                _context2.t0 = _context2[\"catch\"](4);\n                if (this.currentSigntxPopup) this.currentSigntxPopup.close();\n                this.currentSigntxPopup = null;\n                throw _context2.t0;\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 24]]);\n      }));\n\n      function signTransaction(_x) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n    /**\n     * @async\n     * @access public\n     * @description Open a new window to sign a teal program.\n     * @param {Uint8Array|Base64} logic LogicSig program\n     * @param {Address} address Signer Address\n     * @returns {Uint8Array} Returns logicsig blob\n     */\n\n  }, {\n    key: \"signLogicSig\",\n    value: function () {\n      var _signLogicSig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(logic, address) {\n        var logicInBase64, res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.currentSignLogicSigPopup) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                this.currentSignLogicSigPopup.focus();\n                throw new Error(Errors.WINDOW_IS_OPENED);\n\n              case 3:\n                _context3.prev = 3;\n                this.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n                _context3.next = 7;\n                return this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n              case 7:\n                // Send program\n                logicInBase64 = logic;\n                if (logic.constructor === Uint8Array) logicInBase64 = Buffer.from(logic).toString(\"base64\");\n                _context3.next = 11;\n                return this.bridge.sendMessage(this.currentSignLogicSigPopup, {\n                  method: \"logicsig\",\n                  params: {\n                    logic: logicInBase64,\n                    address: address\n                  }\n                }, this.url, {\n                  waitForReply: true,\n                  timeout: this.timeout\n                });\n\n              case 11:\n                res = _context3.sent;\n                if (this.currentSignLogicSigPopup) this.currentSignLogicSigPopup.close();\n                this.currentSignLogicSigPopup = null;\n\n                if (!(res.status === \"error\")) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                throw new Error(res.message);\n\n              case 16:\n                return _context3.abrupt(\"return\", new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\")));\n\n              case 19:\n                _context3.prev = 19;\n                _context3.t0 = _context3[\"catch\"](3);\n                if (this.currentSignLogicSigPopup) this.currentSignLogicSigPopup.close();\n                this.currentSignLogicSigPopup = null;\n                throw _context3.t0;\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 19]]);\n      }));\n\n      function signLogicSig(_x2, _x3) {\n        return _signLogicSig.apply(this, arguments);\n      }\n\n      return signLogicSig;\n    }()\n    /**\n     * @async\n     * @access private\n     * @description Wait until the window opened loads.\n     * @param {Window} targetWindow Window opened context.\n     * @param {number} retries Times to retry before throw an error.\n     * @returns {Promise<void>} Throw error if the window does not load.\n     */\n\n  }, {\n    key: \"waitForWindowToLoad\",\n    value: function () {\n      var _waitForWindowToLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(targetWindow) {\n        var retries,\n            i,\n            res,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                retries = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 30;\n                i = 0;\n\n              case 2:\n                if (!(i < retries)) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                _context4.next = 5;\n                return sleep(300);\n\n              case 5:\n                if (targetWindow) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"break\", 20);\n\n              case 7:\n                _context4.prev = 7;\n                _context4.next = 10;\n                return bridge.sendMessage(targetWindow, {\n                  method: \"status\"\n                }, this.url);\n\n              case 10:\n                res = _context4.sent;\n\n                if (!(res.status == \"success\")) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 13:\n                _context4.next = 17;\n                break;\n\n              case 15:\n                _context4.prev = 15;\n                _context4.t0 = _context4[\"catch\"](7);\n\n              case 17:\n                i++;\n                _context4.next = 2;\n                break;\n\n              case 20:\n                throw new Error(Errors.WINDOW_NOT_LOADED);\n\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[7, 15]]);\n      }));\n\n      function waitForWindowToLoad(_x4) {\n        return _waitForWindowToLoad.apply(this, arguments);\n      }\n\n      return waitForWindowToLoad;\n    }()\n  }]);\n\n  return MyAlgoConnect;\n}();\n\nmodule.exports = MyAlgoConnect;","map":{"version":3,"sources":["C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/@randlabs/myalgo-connect/lib/main.js"],"names":["require","openPopup","sleep","prepareTxn","Errors","Messaging","bridge","MyAlgoConnect","options","timeout","url","bridgeUrl","endsWith","slice","currentConnectPopup","currentSigntxPopup","currentSignLogicSigPopup","settings","shouldSelectOneAccount","focus","Error","WINDOW_IS_OPENED","waitForWindowToLoad","sendMessage","method","params","waitForReply","res","close","status","message","data","accounts","transaction","Array","isArray","txn","from","map","tx","result","t","blob","Uint8Array","Buffer","push","logic","address","logicInBase64","constructor","toString","signedTeal","targetWindow","retries","i","WINDOW_NOT_LOADED","module","exports"],"mappings":";;;;;;;;;;eAAsBA,OAAO,CAAC,eAAD,C;IAArBC,S,YAAAA,S;;gBACsBD,OAAO,CAAC,eAAD,C;IAA7BE,K,aAAAA,K;IAAOC,U,aAAAA,U;;AACf,IAAMC,MAAM,GAAGJ,OAAO,CAAC,gBAAD,CAAtB;;AAEA,IAAMK,SAAS,GAAGL,OAAO,CAAC,uBAAD,CAAzB;;AACA,IAAMM,MAAM,GAAG,IAAID,SAAJ,EAAf;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;IAEME,a;;;AAEL;AACD;AACA;AACA;AACC,yBAAYC,OAAZ,EAAqB;AAAA;;AAEpB;AACF;AACA;AACA;AACE,SAAKF,MAAL,GAAcA,MAAd;AAEA;AACF;AACA;AACA;;AACE,SAAKG,OAAL,GAAgBD,OAAO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","sourcesContent":["const { openPopup } = require(\"./popup/popup\");\nconst { sleep, prepareTxn } = require(\"./utils/utils\");\nconst Errors = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\nconst bridge = new Messaging();\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n\n\t/**\n\t * @constructor\n\t * @param {Options} [options] Operation options\n\t */\n\tconstructor(options) {\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messaging}\n\t\t */\n\t\tthis.bridge = bridge;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Popup Timeout\n\t\t */\n\t\tthis.timeout = (options && options.timeout ? options.timeout : 1600000);\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {string} Frame url\n\t\t */\n\t\tthis.url = (options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\");\n\n\t\tif (this.url.endsWith(\"/\"))\n\t\t\tthis.url = this.url.slice(0, -1);\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current connect opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentConnectPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signtx opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSigntxPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signlogic opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSignLogicSigPopup = null;\n\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to load accounts from storage.\n\t * @param {ConnectionSettings} settings Connect settings\n\t * @returns {Promise<string[]>} Returns allowed accounts by the user.\n\t */\n\tasync connect(settings = { shouldSelectOneAccount: false }) {\n\n\t\tif (this.currentConnectPopup) {\n\t\t\tthis.currentConnectPopup.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentConnectPopup);\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentConnectPopup, { method: \"unlock\", params: { shouldSelectOneAccount: settings.shouldSelectOneAccount } },\n\t\t\t\tthis.url, { waitForReply: true, timeout: this.timeout }\n\t\t\t);\n\n\t\t\tif (this.currentConnectPopup)\n\t\t\t\tthis.currentConnectPopup.close();\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\treturn res.data.accounts;\n\t\t}\n\t\tcatch (err) {\n\t\t\tif (this.currentConnectPopup)\n\t\t\t\tthis.currentConnectPopup.close();\n\t\t\tthis.currentConnectPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n\t * (The signer account must be the same for all transactions).\n\t * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n\t * transaction was an object or an array.\n\t */\n\tasync signTransaction(transaction) {\n\t\tlet txn;\n\n\t\tif (Array.isArray(transaction))\n\t\t\ttxn = Array.from(transaction).map(tx => prepareTxn(tx));\n\t\telse\n\t\t\ttxn = prepareTxn(transaction);\n\n\t\tif (this.currentSigntxPopup) {\n\t\t\tthis.currentSigntxPopup.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, { method: \"transaction\", params: { txn } },\n\t\t\t\tthis.url, { waitForReply: true, timeout: this.timeout }\n\t\t\t);\n\n\t\t\tif (this.currentSigntxPopup)\n\t\t\t\tthis.currentSigntxPopup.close();\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tif (Array.isArray(res.data)) {\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const t of res.data) {\n\t\t\t\t\tt.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tres.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n\n\t\t\treturn res.data;\n\t\t}\n\t\tcatch (err) {\n\t\t\tif (this.currentSigntxPopup)\n\t\t\t\tthis.currentSigntxPopup.close();\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign a teal program.\n\t * @param {Uint8Array|Base64} logic LogicSig program\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns logicsig blob\n\t */\n\tasync signLogicSig(logic, address) {\n\n\t\tif (this.currentSignLogicSigPopup) {\n\t\t\tthis.currentSignLogicSigPopup.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n\t\t\t// Send program\n\t\t\tlet logicInBase64 = logic;\n\t\t\tif (logic.constructor === Uint8Array)\n\t\t\t\tlogicInBase64 = Buffer.from(logic).toString(\"base64\");\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignLogicSigPopup, { method: \"logicsig\", params: { logic: logicInBase64, address } },\n\t\t\t\tthis.url, { waitForReply: true, timeout: this.timeout }\n\t\t\t);\n\n\t\t\tif (this.currentSignLogicSigPopup)\n\t\t\t\tthis.currentSignLogicSigPopup.close();\n\t\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tif (this.currentSignLogicSigPopup)\n\t\t\t\tthis.currentSignLogicSigPopup.close();\n\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access private\n\t * @description Wait until the window opened loads.\n\t * @param {Window} targetWindow Window opened context.\n\t * @param {number} retries Times to retry before throw an error.\n\t * @returns {Promise<void>} Throw error if the window does not load.\n\t */\n\tasync waitForWindowToLoad(targetWindow, retries = 30) {\n\t\tfor (let i = 0; i < retries; i++) {\n\t\t\tawait sleep(300);\n\t\t\tif (!targetWindow) break;\n\t\t\ttry {\n\t\t\t\tconst res = await bridge.sendMessage(targetWindow, { method: \"status\" }, this.url);\n\t\t\t\tif (res.status == \"success\")\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// Ignore error\n\t\t\t}\n\t\t}\n\t\tthrow new Error(Errors.WINDOW_NOT_LOADED);\n\t}\n}\n\nmodule.exports = MyAlgoConnect;\n"]},"metadata":{},"sourceType":"script"}