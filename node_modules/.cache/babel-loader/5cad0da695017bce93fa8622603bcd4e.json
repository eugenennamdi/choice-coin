{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import algosdk from\"algosdk\";import{useEffect,useState}from\"react\";import{useSelector}from\"react-redux\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var port=\"\";var CHOICE_ID=21364625;var indexerAddress=\"https://testnet-algorand.api.purestake.io/idx2\";var token={\"X-API-Key\":\"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\"};var indexerClient=new algosdk.Indexer(token,indexerAddress,port);var GetCommittedAmount=function GetCommittedAmount(){var addressNum=useSelector(function(state){return state.status.addressNum;});var walletAddress=localStorage.getItem(\"address\");var userAddress=!!walletAddress?walletAddress:localStorage.getItem(\"addresses\").split(\",\")[addressNum];// const userAddress = localStorage.getItem(\"address\");\nvar options=[{address:\"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",image:\"\",name:\"Yes\"},{address:\"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",image:\"\",name:\"No\"}];var firstAddress=options[0].address;var secondAddress=options[1].address;var txnAmt=0;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),Amt=_useState2[0],setAmt=_useState2[1];var getIt=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var pastTxn,txns;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return indexerClient.searchForTransactions().address(userAddress).assetID(CHOICE_ID).limit().do();case 3:pastTxn=_context.sent;txns=pastTxn[\"transactions\"];txns.forEach(function(item){var txn=item[\"asset-transfer-transaction\"];if(txn[\"receiver\"]===firstAddress||txn[\"receiver\"]===secondAddress){txnAmt=txnAmt+txn[\"amount\"]/100;}});setAmt(txnAmt);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function getIt(){return _ref.apply(this,arguments);};}();useEffect(function(){getIt();},[userAddress]);return/*#__PURE__*/_jsx(_Fragment,{children:Amt});};export default GetCommittedAmount;","map":{"version":3,"sources":["C:/Users/EUGENE/ChoiceDev/Choice-Coin/src/GetCommittedAmount.js"],"names":["algosdk","useEffect","useState","useSelector","port","CHOICE_ID","indexerAddress","token","indexerClient","Indexer","GetCommittedAmount","addressNum","state","status","walletAddress","localStorage","getItem","userAddress","split","options","address","image","name","firstAddress","secondAddress","txnAmt","Amt","setAmt","getIt","searchForTransactions","assetID","limit","do","pastTxn","txns","forEach","item","txn","console","log"],"mappings":"idAAA,MAAOA,CAAAA,OAAP,KAAoB,SAApB,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,WAAT,KAA4B,aAA5B,C,gGAEA,GAAMC,CAAAA,IAAI,CAAG,EAAb,CACA,GAAMC,CAAAA,SAAS,CAAG,QAAlB,CACA,GAAMC,CAAAA,cAAc,CAAG,gDAAvB,CACA,GAAMC,CAAAA,KAAK,CAAG,CAAE,YAAa,0CAAf,CAAd,CACA,GAAMC,CAAAA,aAAa,CAAG,GAAIR,CAAAA,OAAO,CAACS,OAAZ,CAAoBF,KAApB,CAA2BD,cAA3B,CAA2CF,IAA3C,CAAtB,CAEA,GAAMM,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC/B,GAAMC,CAAAA,UAAU,CAAGR,WAAW,CAAC,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACC,MAAN,CAAaF,UAAxB,EAAD,CAA9B,CACA,GAAMG,CAAAA,aAAa,CAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAtB,CACA,GAAMC,CAAAA,WAAW,CAAG,CAAC,CAACH,aAAF,CAChBA,aADgB,CAEhBC,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCE,KAAlC,CAAwC,GAAxC,EAA6CP,UAA7C,CAFJ,CAIA;AAEA,GAAMQ,CAAAA,OAAO,CAAG,CACd,CACEC,OAAO,CAAE,4DADX,CAEEC,KAAK,CAAE,EAFT,CAGEC,IAAI,CAAE,KAHR,CADc,CAOd,CACEF,OAAO,CAAE,4DADX,CAEEC,KAAK,CAAE,EAFT,CAGEC,IAAI,CAAE,IAHR,CAPc,CAAhB,CAcA,GAAMC,CAAAA,YAAY,CAAGJ,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAhC,CACA,GAAMI,CAAAA,aAAa,CAAGL,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAjC,CACA,GAAIK,CAAAA,MAAM,CAAG,CAAb,CAzB+B,cA2BTvB,QAAQ,CAAC,CAAD,CA3BC,wCA2BxBwB,GA3BwB,eA2BnBC,MA3BmB,eA6B/B,GAAMC,CAAAA,KAAK,0FAAG,0LAEUpB,CAAAA,aAAa,CAC9BqB,qBADiB,GAEjBT,OAFiB,CAETH,WAFS,EAGjBa,OAHiB,CAGTzB,SAHS,EAIjB0B,KAJiB,GAKjBC,EALiB,EAFV,QAENC,OAFM,eAQJC,IARI,CAQGD,OAAO,CAAC,cAAD,CARV,CAUVC,IAAI,CAACC,OAAL,CAAa,SAACC,IAAD,CAAU,CACrB,GAAMC,CAAAA,GAAG,CAAGD,IAAI,CAAC,4BAAD,CAAhB,CACA,GACEC,GAAG,CAAC,UAAD,CAAH,GAAoBd,YAApB,EACAc,GAAG,CAAC,UAAD,CAAH,GAAoBb,aAFtB,CAGE,CACAC,MAAM,CAAGA,MAAM,CAAGY,GAAG,CAAC,QAAD,CAAH,CAAgB,GAAlC,CACD,CACF,CARD,EAUAV,MAAM,CAACF,MAAD,CAAN,CApBU,+EAsBVa,OAAO,CAACC,GAAR,cAtBU,oEAAH,kBAALX,CAAAA,KAAK,0CAAX,CA0BA3B,SAAS,CAAC,UAAM,CACd2B,KAAK,GACN,CAFQ,CAEN,CAACX,WAAD,CAFM,CAAT,CAIA,mBAAO,yBAAGS,GAAH,EAAP,CACD,CA5DD,CA8DA,cAAehB,CAAAA,kBAAf","sourcesContent":["import algosdk from \"algosdk\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = { \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\" };\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst GetCommittedAmount = () => {\n  const addressNum = useSelector((state) => state.status.addressNum);\n  const walletAddress = localStorage.getItem(\"address\");\n  const userAddress = !!walletAddress\n    ? walletAddress\n    : localStorage.getItem(\"addresses\").split(\",\")[addressNum];\n\n  // const userAddress = localStorage.getItem(\"address\");\n\n  const options = [\n    {\n      address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n      image: \"\",\n      name: \"Yes\",\n    },\n\n    {\n      address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n      image: \"\",\n      name: \"No\",\n    },\n  ];\n\n  const firstAddress = options[0].address;\n  const secondAddress = options[1].address;\n  let txnAmt = 0;\n\n  const [Amt, setAmt] = useState(0);\n\n  const getIt = async () => {\n    try {\n      let pastTxn = await indexerClient\n        .searchForTransactions()\n        .address(userAddress)\n        .assetID(CHOICE_ID)\n        .limit()\n        .do();\n      const txns = pastTxn[\"transactions\"];\n\n      txns.forEach((item) => {\n        const txn = item[\"asset-transfer-transaction\"];\n        if (\n          txn[\"receiver\"] === firstAddress ||\n          txn[\"receiver\"] === secondAddress\n        ) {\n          txnAmt = txnAmt + txn[\"amount\"] / 100;\n        }\n      });\n\n      setAmt(txnAmt);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getIt();\n  }, [userAddress]);\n\n  return <>{Amt}</>;\n};\n\nexport default GetCommittedAmount;\n"]},"metadata":{},"sourceType":"module"}