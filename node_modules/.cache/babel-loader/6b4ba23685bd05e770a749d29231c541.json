{"ast":null,"code":"const {\n  openPopup\n} = require(\"./popup/popup\");\n\nconst {\n  sleep,\n  prepareTxn\n} = require(\"./utils/utils\");\n\nconst Errors = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\n\nconst bridge = new Messaging();\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n  /**\n   * @constructor\n   * @param {Options} [options] Operation options\n   */\n  constructor(options) {\n    /**\n     * @access private\n     * @type {Messaging}\n     */\n    this.bridge = bridge;\n    /**\n     * @access private\n     * @type {number} Popup Timeout\n     */\n\n    this.timeout = options && options.timeout ? options.timeout : 1600000;\n    /**\n     * @access private\n     * @type {string} Frame url\n     */\n\n    this.url = options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\";\n    if (this.url.endsWith(\"/\")) this.url = this.url.slice(0, -1);\n    /**\n     * @access private\n     * @description This is used to reuse the current connect opened popup\n     * @type {Window|null}\n     */\n\n    this.currentConnectPopup = null;\n    /**\n     * @access private\n     * @description This is used to reuse the current signtx opened popup\n     * @type {Window|null}\n     */\n\n    this.currentSigntxPopup = null;\n    /**\n     * @access private\n     * @description This is used to reuse the current signlogic opened popup\n     * @type {Window|null}\n     */\n\n    this.currentSignLogicSigPopup = null;\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to load accounts from storage.\n   * @param {ConnectionSettings} settings Connect settings\n   * @returns {Promise<string[]>} Returns allowed accounts by the user.\n   */\n\n\n  async connect(settings = {\n    shouldSelectOneAccount: false\n  }) {\n    if (this.currentConnectPopup) {\n      this.currentConnectPopup.focus();\n      throw new Error(Errors.WINDOW_IS_OPENED);\n    }\n\n    try {\n      this.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n      await this.waitForWindowToLoad(this.currentConnectPopup);\n      const res = await this.bridge.sendMessage(this.currentConnectPopup, {\n        method: \"unlock\",\n        params: {\n          shouldSelectOneAccount: settings.shouldSelectOneAccount\n        }\n      }, this.url, {\n        waitForReply: true,\n        timeout: this.timeout\n      });\n      if (this.currentConnectPopup) this.currentConnectPopup.close();\n      this.currentConnectPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      this.currentConnectPopup = null;\n      return res.data.accounts;\n    } catch (err) {\n      if (this.currentConnectPopup) this.currentConnectPopup.close();\n      this.currentConnectPopup = null;\n      throw err;\n    }\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign transaction.\n   * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n   * (The signer account must be the same for all transactions).\n   * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n   * transaction was an object or an array.\n   */\n\n\n  async signTransaction(transaction) {\n    let txn;\n    if (Array.isArray(transaction)) txn = Array.from(transaction).map(tx => prepareTxn(tx));else txn = prepareTxn(transaction);\n\n    if (this.currentSigntxPopup) {\n      this.currentSigntxPopup.focus();\n      throw new Error(Errors.WINDOW_IS_OPENED);\n    }\n\n    try {\n      this.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n      await this.waitForWindowToLoad(this.currentSigntxPopup); // Send transaction info\n\n      const res = await this.bridge.sendMessage(this.currentSigntxPopup, {\n        method: \"transaction\",\n        params: {\n          txn\n        }\n      }, this.url, {\n        waitForReply: true,\n        timeout: this.timeout\n      });\n      if (this.currentSigntxPopup) this.currentSigntxPopup.close();\n      this.currentSigntxPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n\n      if (Array.isArray(res.data)) {\n        const result = [];\n\n        for (const t of res.data) {\n          t.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n          result.push(t);\n        }\n\n        return result;\n      }\n\n      res.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n      return res.data;\n    } catch (err) {\n      if (this.currentSigntxPopup) this.currentSigntxPopup.close();\n      this.currentSigntxPopup = null;\n      throw err;\n    }\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign a teal program.\n   * @param {Uint8Array|Base64} logic LogicSig program\n   * @param {Address} address Signer Address\n   * @returns {Uint8Array} Returns logicsig blob\n   */\n\n\n  async signLogicSig(logic, address) {\n    if (this.currentSignLogicSigPopup) {\n      this.currentSignLogicSigPopup.focus();\n      throw new Error(Errors.WINDOW_IS_OPENED);\n    }\n\n    try {\n      this.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n      await this.waitForWindowToLoad(this.currentSignLogicSigPopup); // Send program\n\n      let logicInBase64 = logic;\n      if (logic.constructor === Uint8Array) logicInBase64 = Buffer.from(logic).toString(\"base64\");\n      const res = await this.bridge.sendMessage(this.currentSignLogicSigPopup, {\n        method: \"logicsig\",\n        params: {\n          logic: logicInBase64,\n          address\n        }\n      }, this.url, {\n        waitForReply: true,\n        timeout: this.timeout\n      });\n      if (this.currentSignLogicSigPopup) this.currentSignLogicSigPopup.close();\n      this.currentSignLogicSigPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n    } catch (err) {\n      if (this.currentSignLogicSigPopup) this.currentSignLogicSigPopup.close();\n      this.currentSignLogicSigPopup = null;\n      throw err;\n    }\n  }\n  /**\n   * @async\n   * @access private\n   * @description Wait until the window opened loads.\n   * @param {Window} targetWindow Window opened context.\n   * @param {number} retries Times to retry before throw an error.\n   * @returns {Promise<void>} Throw error if the window does not load.\n   */\n\n\n  async waitForWindowToLoad(targetWindow, retries = 30) {\n    for (let i = 0; i < retries; i++) {\n      await sleep(300);\n      if (!targetWindow) break;\n\n      try {\n        const res = await bridge.sendMessage(targetWindow, {\n          method: \"status\"\n        }, this.url);\n        if (res.status == \"success\") return;\n      } catch (err) {// Ignore error\n      }\n    }\n\n    throw new Error(Errors.WINDOW_NOT_LOADED);\n  }\n\n}\n\nmodule.exports = MyAlgoConnect;","map":{"version":3,"sources":["C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/@randlabs/myalgo-connect/lib/main.js"],"names":["openPopup","require","sleep","prepareTxn","Errors","Messaging","bridge","MyAlgoConnect","constructor","options","timeout","url","bridgeUrl","endsWith","slice","currentConnectPopup","currentSigntxPopup","currentSignLogicSigPopup","connect","settings","shouldSelectOneAccount","focus","Error","WINDOW_IS_OPENED","waitForWindowToLoad","res","sendMessage","method","params","waitForReply","close","status","message","data","accounts","err","signTransaction","transaction","txn","Array","isArray","from","map","tx","result","t","blob","Uint8Array","Buffer","push","signLogicSig","logic","address","logicInBase64","toString","signedTeal","targetWindow","retries","i","WINDOW_NOT_LOADED","module","exports"],"mappings":"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","sourcesContent":["const { openPopup } = require(\"./popup/popup\");\nconst { sleep, prepareTxn } = require(\"./utils/utils\");\nconst Errors = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\nconst bridge = new Messaging();\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n\n\t/**\n\t * @constructor\n\t * @param {Options} [options] Operation options\n\t */\n\tconstructor(options) {\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messaging}\n\t\t */\n\t\tthis.bridge = bridge;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Popup Timeout\n\t\t */\n\t\tthis.timeout = (options && options.timeout ? options.timeout : 1600000);\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {string} Frame url\n\t\t */\n\t\tthis.url = (options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\");\n\n\t\tif (this.url.endsWith(\"/\"))\n\t\t\tthis.url = this.url.slice(0, -1);\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current connect opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentConnectPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signtx opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSigntxPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signlogic opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSignLogicSigPopup = null;\n\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to load accounts from storage.\n\t * @param {ConnectionSettings} settings Connect settings\n\t * @returns {Promise<string[]>} Returns allowed accounts by the user.\n\t */\n\tasync connect(settings = { shouldSelectOneAccount: false }) {\n\n\t\tif (this.currentConnectPopup) {\n\t\t\tthis.currentConnectPopup.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentConnectPopup);\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentConnectPopup, { method: \"unlock\", params: { shouldSelectOneAccount: settings.shouldSelectOneAccount } },\n\t\t\t\tthis.url, { waitForReply: true, timeout: this.timeout }\n\t\t\t);\n\n\t\t\tif (this.currentConnectPopup)\n\t\t\t\tthis.currentConnectPopup.close();\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\treturn res.data.accounts;\n\t\t}\n\t\tcatch (err) {\n\t\t\tif (this.currentConnectPopup)\n\t\t\t\tthis.currentConnectPopup.close();\n\t\t\tthis.currentConnectPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n\t * (The signer account must be the same for all transactions).\n\t * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n\t * transaction was an object or an array.\n\t */\n\tasync signTransaction(transaction) {\n\t\tlet txn;\n\n\t\tif (Array.isArray(transaction))\n\t\t\ttxn = Array.from(transaction).map(tx => prepareTxn(tx));\n\t\telse\n\t\t\ttxn = prepareTxn(transaction);\n\n\t\tif (this.currentSigntxPopup) {\n\t\t\tthis.currentSigntxPopup.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, { method: \"transaction\", params: { txn } },\n\t\t\t\tthis.url, { waitForReply: true, timeout: this.timeout }\n\t\t\t);\n\n\t\t\tif (this.currentSigntxPopup)\n\t\t\t\tthis.currentSigntxPopup.close();\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tif (Array.isArray(res.data)) {\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const t of res.data) {\n\t\t\t\t\tt.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tres.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n\n\t\t\treturn res.data;\n\t\t}\n\t\tcatch (err) {\n\t\t\tif (this.currentSigntxPopup)\n\t\t\t\tthis.currentSigntxPopup.close();\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign a teal program.\n\t * @param {Uint8Array|Base64} logic LogicSig program\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns logicsig blob\n\t */\n\tasync signLogicSig(logic, address) {\n\n\t\tif (this.currentSignLogicSigPopup) {\n\t\t\tthis.currentSignLogicSigPopup.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n\t\t\t// Send program\n\t\t\tlet logicInBase64 = logic;\n\t\t\tif (logic.constructor === Uint8Array)\n\t\t\t\tlogicInBase64 = Buffer.from(logic).toString(\"base64\");\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignLogicSigPopup, { method: \"logicsig\", params: { logic: logicInBase64, address } },\n\t\t\t\tthis.url, { waitForReply: true, timeout: this.timeout }\n\t\t\t);\n\n\t\t\tif (this.currentSignLogicSigPopup)\n\t\t\t\tthis.currentSignLogicSigPopup.close();\n\t\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tif (this.currentSignLogicSigPopup)\n\t\t\t\tthis.currentSignLogicSigPopup.close();\n\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access private\n\t * @description Wait until the window opened loads.\n\t * @param {Window} targetWindow Window opened context.\n\t * @param {number} retries Times to retry before throw an error.\n\t * @returns {Promise<void>} Throw error if the window does not load.\n\t */\n\tasync waitForWindowToLoad(targetWindow, retries = 30) {\n\t\tfor (let i = 0; i < retries; i++) {\n\t\t\tawait sleep(300);\n\t\t\tif (!targetWindow) break;\n\t\t\ttry {\n\t\t\t\tconst res = await bridge.sendMessage(targetWindow, { method: \"status\" }, this.url);\n\t\t\t\tif (res.status == \"success\")\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// Ignore error\n\t\t\t}\n\t\t}\n\t\tthrow new Error(Errors.WINDOW_NOT_LOADED);\n\t}\n}\n\nmodule.exports = MyAlgoConnect;\n"]},"metadata":{},"sourceType":"script"}