{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{WalletSelector}from\"@xbacked-dao/algorand-wallet-select\";import WalletConnect from\"@walletconnect/client\";import QRCodeModal from\"algorand-walletconnect-qrcode-modal\";import algosdk from\"algosdk\";import{formatJsonRpcRequest}from\"@json-rpc-tools/utils\";import{useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var Test=function Test(){//\nuseEffect(function(){var connector=new WalletConnect({bridge:\"https://bridge.walletconnect.org\",qrcodeModal:QRCodeModal});if(!connector.connected){connector.createSession();}connector.on(\"connect\",function(error,payload){if(error){throw error;}var accounts=payload.params[0].accounts;console.log(accounts);});connector.on(\"session_update\",function(error,payload){if(error){throw error;}var accounts=payload.params[0].accounts;console.log(accounts);});connector.on(\"disconnect\",function(error,payload){if(error){console.log(error);}});},[]);var returnWallet=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data){var _data$connector;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!data){_context.next=8;break;}console.log(data===null||data===void 0?void 0:(_data$connector=data.connector)===null||_data$connector===void 0?void 0:_data$connector.check());_context.t0=console;_context.next=5;return data.connector.connect();case 5:_context.t1=_context.sent;_context.t0.log.call(_context.t0,_context.t1);console.log(data.connector.provider);case 8:case\"end\":return _context.stop();}}},_callee);}));return function returnWallet(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsx(WalletSelector,{returnWallet:returnWallet,wallets:\"walletconnect\"});return/*#__PURE__*/_jsx(\"div\",{});};export default Test;","map":{"version":3,"sources":["C:/Users/EUGENE/ChoiceDev/Choice-Coin/src/statics/Test.js"],"names":["WalletSelector","WalletConnect","QRCodeModal","algosdk","formatJsonRpcRequest","useEffect","Test","connector","bridge","qrcodeModal","connected","createSession","on","error","payload","accounts","params","console","log","returnWallet","data","check","connect","provider"],"mappings":"qTAAA,OAASA,cAAT,KAA+B,qCAA/B,CAEA,MAAOC,CAAAA,aAAP,KAA0B,uBAA1B,CACA,MAAOC,CAAAA,WAAP,KAAwB,qCAAxB,CACA,MAAOC,CAAAA,OAAP,KAAoB,SAApB,CACA,OAASC,oBAAT,KAAqC,uBAArC,CACA,OAASC,SAAT,KAA0B,OAA1B,C,2CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjB;AAEAD,SAAS,CAAC,UAAM,CACd,GAAME,CAAAA,SAAS,CAAG,GAAIN,CAAAA,aAAJ,CAAkB,CAClCO,MAAM,CAAE,kCAD0B,CAElCC,WAAW,CAAEP,WAFqB,CAAlB,CAAlB,CAKA,GAAI,CAACK,SAAS,CAACG,SAAf,CAA0B,CACxBH,SAAS,CAACI,aAAV,GACD,CAEDJ,SAAS,CAACK,EAAV,CAAa,SAAb,CAAwB,SAACC,KAAD,CAAQC,OAAR,CAAoB,CAC1C,GAAID,KAAJ,CAAW,CACT,KAAMA,CAAAA,KAAN,CACD,CAHyC,GAKlCE,CAAAA,QALkC,CAKrBD,OAAO,CAACE,MAAR,CAAe,CAAf,CALqB,CAKlCD,QALkC,CAO1CE,OAAO,CAACC,GAAR,CAAYH,QAAZ,EACD,CARD,EAUAR,SAAS,CAACK,EAAV,CAAa,gBAAb,CAA+B,SAACC,KAAD,CAAQC,OAAR,CAAoB,CACjD,GAAID,KAAJ,CAAW,CACT,KAAMA,CAAAA,KAAN,CACD,CAHgD,GAKzCE,CAAAA,QALyC,CAK5BD,OAAO,CAACE,MAAR,CAAe,CAAf,CAL4B,CAKzCD,QALyC,CAOjDE,OAAO,CAACC,GAAR,CAAYH,QAAZ,EACD,CARD,EAUAR,SAAS,CAACK,EAAV,CAAa,YAAb,CAA2B,SAACC,KAAD,CAAQC,OAAR,CAAoB,CAC7C,GAAID,KAAJ,CAAW,CACTI,OAAO,CAACC,GAAR,CAAYL,KAAZ,EACD,CACF,CAJD,EAKD,CAnCQ,CAmCN,EAnCM,CAAT,CAqCA,GAAMM,CAAAA,YAAY,0FAAG,iBAAOC,IAAP,yIACd,CAACA,IADa,yBAEjBH,OAAO,CAACC,GAAR,CAAYE,IAAZ,SAAYA,IAAZ,kCAAYA,IAAI,CAAEb,SAAlB,0CAAY,gBAAiBc,KAAjB,EAAZ,EAFiB,YAGjBJ,OAHiB,uBAGCG,CAAAA,IAAI,CAACb,SAAL,CAAee,OAAf,EAHD,8CAGTJ,GAHS,+BAIjBD,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACb,SAAL,CAAegB,QAA3B,EAJiB,sDAAH,kBAAZJ,CAAAA,YAAY,4CAAlB,CAQA,mBAAO,KAAC,cAAD,EAAgB,YAAY,CAAEA,YAA9B,CAA4C,OAAO,CAAC,eAApD,EAAP,CAEA,mBAAO,cAAP,CACD,CAnDD,CAqDA,cAAeb,CAAAA,IAAf","sourcesContent":["import { WalletSelector } from \"@xbacked-dao/algorand-wallet-select\";\n\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport algosdk from \"algosdk\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { useEffect } from \"react\";\n\nconst Test = () => {\n  //\n\n  useEffect(() => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n\n    if (!connector.connected) {\n      connector.createSession();\n    }\n\n    connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const { accounts } = payload.params[0];\n\n      console.log(accounts);\n    });\n\n    connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const { accounts } = payload.params[0];\n\n      console.log(accounts);\n    });\n\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  }, []);\n\n  const returnWallet = async (data) => {\n    if (!!data) {\n      console.log(data?.connector?.check());\n      console.log(await data.connector.connect());\n      console.log(data.connector.provider);\n    }\n  };\n\n  return <WalletSelector returnWallet={returnWallet} wallets=\"walletconnect\" />;\n\n  return <div></div>;\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}