{"ast":null,"code":"const Messenger = require(\"@randlabs/communication-bridge\");\n\nconst WALLET_BRIDGE_CHANNEL_NAME = \"wallet-bridge-communication-channel\";\n\nclass Messaging {\n  /**\n   * @description Request object\n   * @typedef {Object} Request\n   * @property {string} method Request method\n   * @property {Object} [params] Optionally, request params\n   */\n\n  /**\n   * @description Response object\n   * @typedef {Object} Response\n   * @property {\"error\"|\"success\"} status Response status\n   * @property {string} message Response message\n   * @property {Object} [data] Optionally, is the request was a success and sent data\n   */\n\n  /**\n   * @description Callback function to manage message received from the channel\n      * @callback onMessagingCallback\n      * @param {Request} request Request received from another window\n      * @param {sendResponse} cb Response callback\n   * @returns {void}\n      */\n\n  /**\n      * @constructor Messaging constructor\n      * @param {onMessagingCallback} [listenerCallback]\n      * @description Create an abstraction of Messenger class\n      */\n  constructor(listenerCallback) {\n    const that = this;\n    /**\n     * @access public\n     * @description Send message options\n     * @type {import(\"bridge-communication\").sendMessageOptions}\n     */\n\n    this.options = {\n      waitForReply: true,\n      timeout: 250\n    };\n    /**\n     * @access private\n     */\n\n    this.listenerCallback = listenerCallback;\n    /**\n     * @access private\n     * @type {Messenger}\n     */\n\n    this.bridge = new Messenger(WALLET_BRIDGE_CHANNEL_NAME, function (req, source, cb, bridge) {\n      if (that.listenerCallback) that.listenerCallback(req, cb);\n    });\n  }\n  /**\n   * @access public\n      * @description Send message to a target window\n      * @param {Window} window Target window\n      * @param {Request} request Request\n      * @param {string} origin Target origin\n   * @param {import(\"bridge-communication\").sendMessageOptions} [options] Override default message options\n   * @returns {Promise<Response>} Response of the target window\n      */\n\n\n  sendMessage(window, request, origin, options) {\n    return this.bridge.sendMessage(window, request, origin, options ? options : this.options);\n  }\n  /**\n   * @access public\n   * @description Set new listener\n   * @param {onMessagingCallback} [listenerCallback] Set a new listener or override actual listener\n   * @returns {void}\n   */\n\n\n  setNewListener(listenerCallback) {\n    this.listenerCallback = listenerCallback;\n  }\n  /**\n   * @access public\n   * @description Close bridge\n   * @returns {void}\n   */\n\n\n  close() {\n    this.bridge.close();\n  }\n\n}\n\nmodule.exports = Messaging;","map":{"version":3,"sources":["C:/Users/EUGENE/ChoiceDev/Choice-Coin/node_modules/@randlabs/myalgo-connect/lib/messaging/Messaging.js"],"names":["Messenger","require","WALLET_BRIDGE_CHANNEL_NAME","Messaging","constructor","listenerCallback","that","options","waitForReply","timeout","bridge","req","source","cb","sendMessage","window","request","origin","setNewListener","close","module","exports"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,gCAAD,CAAzB;;AAEA,MAAMC,0BAA0B,GAAG,qCAAnC;;AAEA,MAAMC,SAAN,CAAgB;AAEf;AACD;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;;AAGC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AAECC,EAAAA,WAAW,CAACC,gBAAD,EAAmB;AAC7B,UAAMC,IAAI,GAAG,IAAb;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,OAAL,GAAe;AAAEC,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,OAAO,EAAE;AAA/B,KAAf;AAEA;AACF;AACA;;AACE,SAAKJ,gBAAL,GAAwBA,gBAAxB;AAEA;AACF;AACA;AACA;;AACE,SAAKK,MAAL,GAAc,IAAIV,SAAJ,CAAcE,0BAAd,EAA0C,UAASS,GAAT,EAAcC,MAAd,EAAsBC,EAAtB,EAA0BH,MAA1B,EAAkC;AACzF,UAAIJ,IAAI,CAACD,gBAAT,EACCC,IAAI,CAACD,gBAAL,CAAsBM,GAAtB,EAA2BE,EAA3B;AACD,KAHa,CAAd;AAIA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAECC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,MAAlB,EAA0BV,OAA1B,EAAmC;AAC7C,WAAO,KAAKG,MAAL,CAAYI,WAAZ,CAAwBC,MAAxB,EAAgCC,OAAhC,EAAyCC,MAAzC,EAAiDV,OAAO,GAAGA,OAAH,GAAa,KAAKA,OAA1E,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCW,EAAAA,cAAc,CAACb,gBAAD,EAAmB;AAChC,SAAKA,gBAAL,GAAwBA,gBAAxB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCc,EAAAA,KAAK,GAAG;AACP,SAAKT,MAAL,CAAYS,KAAZ;AACA;;AAxFc;;AA2FhBC,MAAM,CAACC,OAAP,GAAiBlB,SAAjB","sourcesContent":["const Messenger = require(\"@randlabs/communication-bridge\");\n\nconst WALLET_BRIDGE_CHANNEL_NAME = \"wallet-bridge-communication-channel\";\n\nclass Messaging {\n\n\t/**\n\t * @description Request object\n\t * @typedef {Object} Request\n\t * @property {string} method Request method\n\t * @property {Object} [params] Optionally, request params\n\t */\n\n\t/**\n\t * @description Response object\n\t * @typedef {Object} Response\n\t * @property {\"error\"|\"success\"} status Response status\n\t * @property {string} message Response message\n\t * @property {Object} [data] Optionally, is the request was a success and sent data\n\t */\n\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessagingCallback\n     * @param {Request} request Request received from another window\n     * @param {sendResponse} cb Response callback\n\t * @returns {void}\n     */\n\n\t/**\n     * @constructor Messaging constructor\n     * @param {onMessagingCallback} [listenerCallback]\n     * @description Create an abstraction of Messenger class\n     */\n\n\tconstructor(listenerCallback) {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access public\n\t\t * @description Send message options\n\t\t * @type {import(\"bridge-communication\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: 250 };\n\n\t\t/**\n\t\t * @access private\n\t\t */\n\t\tthis.listenerCallback = listenerCallback;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messenger}\n\t\t */\n\t\tthis.bridge = new Messenger(WALLET_BRIDGE_CHANNEL_NAME, function(req, source, cb, bridge) {\n\t\t\tif (that.listenerCallback)\n\t\t\t\tthat.listenerCallback(req, cb);\n\t\t});\n\t}\n\n\t/**\n\t * @access public\n     * @description Send message to a target window\n     * @param {Window} window Target window\n     * @param {Request} request Request\n     * @param {string} origin Target origin\n\t * @param {import(\"bridge-communication\").sendMessageOptions} [options] Override default message options\n\t * @returns {Promise<Response>} Response of the target window\n     */\n\n\tsendMessage(window, request, origin, options) {\n\t\treturn this.bridge.sendMessage(window, request, origin, options ? options : this.options);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Set new listener\n\t * @param {onMessagingCallback} [listenerCallback] Set a new listener or override actual listener\n\t * @returns {void}\n\t */\n\tsetNewListener(listenerCallback) {\n\t\tthis.listenerCallback = listenerCallback;\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close bridge\n\t * @returns {void}\n\t */\n\tclose() {\n\t\tthis.bridge.close();\n\t}\n}\n\nmodule.exports = Messaging;\n"]},"metadata":{},"sourceType":"script"}